#!/usr/bin/perl
#
# SCTP Conformance Test Suite Implementation
# (C) Copyright Fujitsu Ltd. 2008, 2009
#
# This file is part of the SCTP Conformance Test Suite implementation.
#
# The SCTP Conformance Test Suite implementation is free software;
# you can redistribute it and/or modify it under the terms of
# the GNU General Public License version 2 as published by
# the Free Software Foundation.
#
# The SCTP Conformance Test Suite implementation is distributed in the
# hope that it will be useful, but WITHOUT ANY WARRANTY; without even
# the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
# PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with GNU CC; see the file COPYING.  If not, write to
# the Free Software Foundation, 59 Temple Place - Suite 330,
# Boston, MA 02111-1307, USA.
#
# Please send any bug reports or fixes you make to the
# email address(es):
#    networktest sctp <networktest-sctp@lists.sourceforge.net>
#
# Or submit a bug report through the following website:
#    http://networktest.sourceforge.net/
#
# Written or modified by:
#    Hiroaki Kago <linuxsctp-kg@ml.css.fujitsu.com>
#    Wei Yongjun <yjwei@cn.fujitsu.com>
#
# Any bugs reported given to us we will try to fix... any fixes shared will
# be incorporated into the next SCTP release.
#
##############################################################################
BEGIN {	$V6evalTool::TestVersion = '$Name: REL_1_0_1 $'; }

use lib "../common";
use V6evalTool;
use SCTP;

%pktdesc = (
	sctp_chunk_asconf_add_addr	=> "Recv SCTP CHUNK_ASCONF (Add IP Address)",
	sctp_chunk_asconf_ack_snd	=> "Send SCTP CHUNK_ASCONF_ACK (Success Indication)",
	sctp_chunk_asconf_ack_noauth	=> "Send SCTP CHUNK_ASCONF_ACK (unauthenticated)",
);

$IF0 = Link0;

vCapture($IF0);

sctpCheckEnv($IF0);

sctpStartInteractiveServer($IF0, "recv", "add=$SCTP::CONF{'SCTP_NUT_NET1_ADDR'}", "recv");

vConnect($IF0);

vLogHTML('<B>================ Main Test =================</B>');

%ret = vWarpRecv($IF0, 10, 0, 0, sctp_chunk_asconf_add_addr);
if ($ret{status} != 0 || $ret{recvFrame} ne sctp_chunk_asconf_add_addr) {
	vLogHTML('Cannot receive SCTP CHUNK_ASCONF<BR>');
	vSend($IF0, sctp_chunk_abort_snd);
	vLogHTML('<FONT COLOR="#00FF00">NG</FONT>');
	exit $V6evalTool::exitFail;
}

sctpFetchAsconfField(\%ret);

vSend($IF0, sctp_chunk_asconf_ack_noauth);

%ret = vWarpRecv($IF0, 10, 0, 0, sctp_chunk_asconf_add_addr);
if ($ret{status} != 0 || $ret{recvFrame} ne sctp_chunk_asconf_add_addr) {
	vLogHTML('Cannot receive SCTP CHUNK_ASCONF<BR>');
	vSend($IF0, sctp_chunk_abort_snd);
	vLogHTML('<FONT COLOR="#00FF00">NG</FONT>');
	exit $V6evalTool::exitFail;
}

vSend($IF0, sctp_chunk_asconf_ack_snd);

vClose($IF0);

vLogHTML(OK);
exit $V6evalTool::exitPass;

######################################################################
__END__

=head1 NAME

  AsconfAckWithoutAuth.seq - ASCONF-ACK chunk is received unauthenticated when endpoint support AUTH extension

=head1 PURPOSE

  To check that if ASCONF-ACK chunk is received unauthenticated when
  endpoint support AUTH extension then the endpoint should silently
  discard the ASCONF-ACK chunk.

=head1 SYNOPSIS

=begin html
<PRE>
  <A HREF="./AsconfAckWithoutAuth.seq">./AsconfAckWithoutAuth.seq</A> [-tooloption ...] -pkt <A HREF="./AsconfAckWithoutAuth.def">./AsconfAckWithoutAuth.def</A>
    -tooloption : v6eval tool option
  See Also: <A HREF="../common/STD_PKT_COMMON.def">../common/STD_PKT_COMMON.def</A>
            <A HREF="../common/SCTP_COMMON.def">../common/SCTP_COMMON.def</A>
</PRE>

=end html

=head1 PRE-TEST CONDITION

  Association is established between endpoint A and B. Arrange the
  data in endpoint A such that ASCONF-ACK chunk unauthenticated is
  sent to endpoint B.

=head1 TEST PROCEDURE

  Endpoint A                           Endpoint B                ULP
  (ESTABLISHED)                        (ESTABLISHED)

                                                   <-----    Asconf
                <-----------------      ASCONF

  ASCONF-ACK    ----------------->      Silently Discard

                <-----------------      ASCONF
                                        (retransmit)

  TEST DESCRIPTION:

  1. Send unauthenticated ASCONF-ACK chunk from endpoint A to B
     after received ASCONF chunk.
  2. Check A: ASCONF-ACK chunk should be silently discarded at
     endpoint B. ASCONF chunk is sent to endpoint A again after
     expiry of T4-RTO timer.

=head1 NOTE

  None

=head1 REFERENCE

  RFC 5061

  4.1.2.  Address Configuration Acknowledgment Chunk (ASCONF-ACK)

=begin html
<PRE>
    This chunk is used by the receiver of an ASCONF Chunk to acknowledge
    the reception.  It carries zero or more results for any ASCONF
    parameters that were processed by the receiver.  This chunk MUST be
    sent in an authenticated way by using the mechanism defined in
    [RFC4895].  <B>If this chunk is received unauthenticated it MUST be
    silently discarded as described in [RFC4895].</B>
</PRE>

=end html

