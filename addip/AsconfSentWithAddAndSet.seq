#!/usr/bin/perl
#
# SCTP Conformance Test Suite Implementation
# (C) Copyright Fujitsu Ltd. 2008, 2009
#
# This file is part of the SCTP Conformance Test Suite implementation.
#
# The SCTP Conformance Test Suite implementation is free software;
# you can redistribute it and/or modify it under the terms of
# the GNU General Public License version 2 as published by
# the Free Software Foundation.
#
# The SCTP Conformance Test Suite implementation is distributed in the
# hope that it will be useful, but WITHOUT ANY WARRANTY; without even
# the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
# PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with GNU CC; see the file COPYING.  If not, write to
# the Free Software Foundation, 59 Temple Place - Suite 330,
# Boston, MA 02111-1307, USA.
#
# Please send any bug reports or fixes you make to the
# email address(es):
#    networktest sctp <networktest-sctp@lists.sourceforge.net>
#
# Or submit a bug report through the following website:
#    http://networktest.sourceforge.net/
#
# Written or modified by:
#    Hiroaki Kago <linuxsctp-kg@ml.css.fujitsu.com>
#    Wei Yongjun <yjwei@cn.fujitsu.com>
#
# Any bugs reported given to us we will try to fix... any fixes shared will
# be incorporated into the next SCTP release.
#
##############################################################################
BEGIN {	$V6evalTool::TestVersion = '$Name: REL_1_0_3 $'; }

use lib "../common";
use V6evalTool;
use SCTP;

%pktdesc = (
	sctp_chunk_asconf_add_addr	=> "Recv SCTP CHUNK_ASCONF (Add IP Address)",
	sctp_chunk_asconf_ack_add_ok	=> "Send SCTP CHUNK_ASCONF_ACK",
	sctp_chunk_asconf_set_prim	=> "Recv SCTP CHUNK_ASCONF (Set Primary Address)",
	sctp_chunk_asconf_ack_set_ok	=> "Send SCTP CHUNK_ASCONF_ACK",
);

$IF0 = Link0;

vCapture($IF0);

sctpCheckEnv($IF0);

sctpStartInteractiveServer($IF0, "recv", "add=$SCTP::CONF{'SCTP_NUT_NET1_ADDR'}", "pprim=$SCTP::CONF{'SCTP_NUT_NET1_ADDR'}", "recv");

vConnect($IF0);

vLogHTML('<B>================ Main Test =================</B>');

%ret = vWarpRecv($IF0, 10, 0, 0, sctp_chunk_asconf_add_addr);
if ($ret{status} != 0 || $ret{recvFrame} ne sctp_chunk_asconf_add_addr) {
	vLogHTML('Cannot receive SCTP CHUNK_ASCONF<BR>');
	vSend($IF0, sctp_chunk_abort_snd);
	vLogHTML('<FONT COLOR="#00FF00">NG</FONT>');
	exit $V6evalTool::exitFail;
}

sctpFetchAsconfField(\%ret);

vSend($IF0, sctp_chunk_asconf_ack_add_ok);

%ret = vWarpRecv($IF0, 10, 0, 0, sctp_chunk_asconf_set_prim);
if ($ret{status} != 0 || $ret{recvFrame} ne sctp_chunk_asconf_set_prim) {
	vLogHTML('Cannot receive SCTP CHUNK_ASCONF<BR>');
	vSend($IF0, sctp_chunk_abort_snd);
	vLogHTML('<FONT COLOR="#00FF00">NG</FONT>');
	exit $V6evalTool::exitFail;
}

sctpFetchAsconfField(\%ret);

vSend($IF0, sctp_chunk_asconf_ack_set_ok);

vClose($IF0);

vLogHTML(OK);
exit $V6evalTool::exitPass;

######################################################################
__END__

=head1 NAME

  AsconfSentWithAddAndSet.seq - ASCONF chunk should be queued for later transmission if an ASCONF chunk is outstanding

=head1 PURPOSE

  To check that if an ASCONF chunk is outstanding then the ASCONF chunk
  should be queued for later transmission and no further action should
  be taken until the previous ASCONF is acknowledged or a timeout occurs.

=head1 SYNOPSIS

=begin html
<PRE>
  <A HREF="./AsconfSentWithAddAndSet.seq">./AsconfSentWithAddAndSet.seq</A> [-tooloption ...] -pkt <A HREF="./AsconfSentWithAddAndSet.def">./AsconfSentWithAddAndSet.def</A>
    -tooloption : v6eval tool option
  See Also: <A HREF="../common/STD_PKT_COMMON.def">../common/STD_PKT_COMMON.def</A>
            <A HREF="../common/SCTP_COMMON.def">../common/SCTP_COMMON.def</A>
</PRE>

=end html

=head1 PRE-TEST CONDITION

  Association is established between endpoint A and B. Arrange the date
  in endpoint B such that ASCONF chunk with Add IP Address Parameter is
  sent to endpoint A.

=head1 TEST PROCEDURE

  Endpoint A                           Endpoint B                ULP
  (ESTABLISHED)                        (ESTABLISHED)

                                                   <-----    Asconf
                <-----------------      ASCONF
                                        (Add IP Address)
                                                   <-----    Asconf
  ASCONF-ACK    ----------------->
  (Success Indication)
                <-----------------      ASCONF
                                        (Set Primary Address)
  ASCONF-ACK    ----------------->
  (Success Indication)

  TEST DESCRIPTION:

  1. Sending ASCONF message with Add IP Address Parameter from endpoint
     B to A.
     Record the message sequence using a signal emulator.
  2. Send ASCONF message with Set Primary Address Parameter from endpoint
     B to A before ASCONF-ACK message is received on endpoint B.
  3. Check A: ASCONF chunk with Set Primary Address Parameter should be
     queued for later transmission until the previous ASCONF message with
     Add IP Address Parameter is acknowledged.
  4. Send ASCONF-ACK message with Success Indication parameter indicating
     Add IP Address success from endpoint A to B.
  5. Check B: ASCONF chunk with Set Primary Address Parameter should be
     transmited from endpoint B to A.
  6. Send ASCONF-ACK message with Success Indication parameter indicating
     Set Primary Address success from endpoint A to B.

=head1 NOTE

  None

=head1 REFERENCE

  RFC 5061

  5.1.  ASCONF Chunk Procedures

    A2)  A Sequence Number MUST be assigned to the Chunk.  The Sequence
         Number MUST be larger by one.  The Sequence Number MUST be
         initialized at the start of the association to the same value as
         the Initial Transmission Sequence Number (TSN) and every time a
         new ASCONF Chunk is created, it MUST be incremented by one after
         assigning the Sequence Number to the newly created chunk.

=begin html
<PRE>
    <B>A3)  If no SCTP packet with one or more ASCONF Chunk(s) is
         outstanding (unacknowledged) with the remote peer, send the
         chunk and proceed to step A4.  If an ASCONF chunk is
         outstanding, then the ASCONF chunk should be queued for later
         transmission and no further action should be taken until the
         previous ASCONF is acknowledged or a timeout occurs.</B>
</PRE>

=end html

    A4)  The sender MUST Start a T-4 Retransmission Timeout (RTO) timer,
         using the RTO value of the selected destination address
         (normally the primary path; see [RFC4960], Section 6.4 for
         details).


