#!/usr/bin/perl
#
# SCTP Conformance Test Suite Implementation
# (C) Copyright Fujitsu Ltd. 2008, 2009
#
# This file is part of the SCTP Conformance Test Suite implementation.
#
# The SCTP Conformance Test Suite implementation is free software;
# you can redistribute it and/or modify it under the terms of
# the GNU General Public License version 2 as published by
# the Free Software Foundation.
#
# The SCTP Conformance Test Suite implementation is distributed in the
# hope that it will be useful, but WITHOUT ANY WARRANTY; without even
# the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
# PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with GNU CC; see the file COPYING.  If not, write to
# the Free Software Foundation, 59 Temple Place - Suite 330,
# Boston, MA 02111-1307, USA.
#
# Please send any bug reports or fixes you make to the
# email address(es):
#    networktest sctp <networktest-sctp@lists.sourceforge.net>
#
# Or submit a bug report through the following website:
#    http://networktest.sourceforge.net/
#
# Written or modified by:
#    Hiroaki Kago <linuxsctp-kg@ml.css.fujitsu.com>
#    Wei Yongjun <yjwei@cn.fujitsu.com>
#
# Any bugs reported given to us we will try to fix... any fixes shared will
# be incorporated into the next SCTP release.
#
##############################################################################
BEGIN {	$V6evalTool::TestVersion = '$Name: REL_1_0_2 $'; }

use lib "../common";
use V6evalTool;
use SCTP;

%pktdesc = (
	sctp_chunk_asconf_add_addr	=> "Recv SCTP CHUNK_ASCONF (Add IP Address)",
	sctp_chunk_asconf_ack_and_data	=> "Send SCTP CHUNK_ASCONF_ACK (Bunding with DATA)",
);

$IF0 = Link0;

vCapture($IF0);

sctpCheckEnv($IF0);

sctpStartInteractiveServer($IF0, "recv", "add=$SCTP::CONF{'SCTP_NUT_NET1_ADDR'}", "recv");

vConnect($IF0);

vLogHTML('<B>================ Main Test =================</B>');

%ret = vWarpRecv($IF0, 10, 0, 0, sctp_chunk_asconf_add_addr);
if ($ret{status} != 0 || $ret{recvFrame} ne sctp_chunk_asconf_add_addr) {
	vLogHTML('Cannot receive SCTP CHUNK_ASCONF<BR>');
	vSend($IF0, sctp_chunk_abort_snd);
	vLogHTML('<FONT COLOR="#00FF00">NG</FONT>');
	exit $V6evalTool::exitFail;
}

sctpFetchAsconfField(\%ret);
sctpUpdateSendTSN();

vSend($IF0, sctp_chunk_asconf_ack_and_data);

%ret = vWarpRecv($IF0, 10, 0, 0, sctp_chunk_sack_rcv);
if ($ret{status} != 0 || $ret{recvFrame} ne sctp_chunk_sack_rcv) {
	vLogHTML('Cannot receive SCTP CHUNK_SACK<BR>');
	vSend($IF0, sctp_chunk_abort_snd);
	vLogHTML('<FONT COLOR="#00FF00">NG</FONT>');
	exit $V6evalTool::exitFail;
}

vClose($IF0);

vLogHTML(OK);
exit $V6evalTool::exitPass;

######################################################################
__END__

=head1 NAME

  BundledAsconfAckAndOther.seq - ASCONF-ACK chunk is received bundled with other chunk as the first chunk

=head1 PURPOSE

  To check that if ASCONF-ACK chunk is received bundled with other chunk as the
  first chunk then the endpoint should accept both of the messages.

=head1 SYNOPSIS

=begin html
<PRE>
  <A HREF="./BundledAsconfAckAndOther.seq">./BundledAsconfAckAndOther.seq</A> [-tooloption ...] -pkt <A HREF="./BundledAsconfAckAndOther.def">./BundledAsconfAckAndOther.def</A>
    -tooloption : v6eval tool option
  See Also: <A HREF="../common/STD_PKT_COMMON.def">../common/STD_PKT_COMMON.def</A>
            <A HREF="../common/SCTP_COMMON.def">../common/SCTP_COMMON.def</A>
</PRE>

=end html

=head1 PRE-TEST CONDITION

  Association is established between endpoint A and B. Arrange date
  in endpoint B such that ASCONF chunk with Add IP Address Parameter
  is sent to endpoint A.

=head1 TEST PROCEDURE

  Endpoint A                           Endpoint B                ULP
  (ESTABLISHED)                        (ESTABLISHED)

                                                  <-----    Asconf
                <-----------------      ASCONF

  ASCONF-ACK    ----------------->
  (Bunding with DATA)
                <-----------------      SACK

  TEST DESCRIPTION:

  1. Sending ASCONF message with Delete IP Address Parameter from
     endpoint B to A.
     Record the message sequence using a signal emulator.
  2. Send ASCONF-ACK message bundled with DATA chunk as the first
     chunk from endpoint A to B.
  3. Check A: Endpoint B should consider the address part of the
     existing association and SACK chunk should be received to
     response the DATA chunk at endpoint A.

=head1 NOTE

  None

=head1 REFERENCE

  RFC 5061

  5.1.1.  Congestion Control of ASCONF Chunks

    In defining the ASCONF Chunk transfer procedures, it is essential
    that these transfers MUST NOT cause congestion within the network.
    To achieve this, we place these restrictions on the transfer of
    ASCONF Chunks:

    C2)  An ASCONF Chunk may be bundled with any other chunk type
         including other ASCONF Chunks.  If bundled with other ASCONF
         Chunks, the chunks MUST appear in sequential order with respect
         to their Sequence Number.

=begin html
<PRE>
    <B>C3)  An ASCONF-ACK Chunk may be bundled with any other chunk type
         including other ASCONF-ACK Chunks.</B>  If bundled with other
         ASCONF-ACK Chunks, the chunks MUST appear in sequential order
         with respect to their Sequence Number.
</PRE>

=end html


