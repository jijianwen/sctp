// SCTP Conformance Test Suite Implementation
// (C) Copyright Fujitsu Ltd. 2008, 2009
//
// This file is part of the SCTP Conformance Test Suite implementation.
//
// The SCTP Conformance Test Suite implementation is free software;
// you can redistribute it and/or modify it under the terms of
// the GNU General Public License version 2 as published by
// the Free Software Foundation.
//
// The SCTP Conformance Test Suite implementation is distributed in the
// hope that it will be useful, but WITHOUT ANY WARRANTY; without even
// the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
// PURPOSE. See the GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with GNU CC; see the file COPYING.  If not, write to
// the Free Software Foundation, 59 Temple Place - Suite 330,
// Boston, MA 02111-1307, USA.
//
// Please send any bug reports or fixes you make to the
// email address(es):
//    networktest sctp <networktest-sctp@lists.sourceforge.net>
//
// Or submit a bug report through the following website:
//    http://networktest.sourceforge.net/
//
// Written or modified by:
//    Hiroaki Kago <linuxsctp-kg@ml.css.fujitsu.com>
//    Wei Yongjun <yjwei@cn.fujitsu.com>
//
// Any bugs reported given to us we will try to fix... any fixes shared will
// be incorporated into the next SCTP release.
//

#include "../common/STD_PKT_COMMON.def"

//
// SCTP CHUNK_ASCONF
//
PKG_SCTP_SHORT_RECV_AUTH(
	sctp_chunk_asconf_link0,
	{
		chunk = asconf_add_addr;
	}
)

CHUNK_ASCONF asconf_add_addr {
	SerialNumber = RSERIAL;
	Param = addr0;
	Param = addaddr;
}

AddIPAddress addaddr {
	RequestID = any;
	Address = addr1;
}

#if (ENABLE_IPV6 == 0)

IPv4Address addr0 {
	Address = v4(SCTP4_NUT_NET0_ADDR);
}

IPv4Address addr1 {
	Address = v4(SCTP4_NUT_NET1_ADDR);
}

#else

IPv6Address addr0 {
	Address = SCTP6_NUT_NET0_ADDR;
}

IPv6Address addr1 {
	Address = SCTP6_NUT_NET1_ADDR;
}

#endif /* #if (ENABLE_IPV6 == 0) */

//
// SCTP CHUNK_ASCONF
//
PKG_SCTP_NORM_RECV_AUTH(
	sctp_chunk_asconf_link1,
	{
		_SRC(SCTP_NUT_NET0_ADDR);
		_DST(SCTP_TN_NET1_ADDR);
	},
	{
		chunk = asconf_add_addr;
	}
)

//
// SCTP CHUNK_ASCONF_ACK
//
PKG_SCTP_SHORT_SEND_AUTH(
	sctp_chunk_asconf_ack_err,
	{
		chunk = asconf_ack_err;
	}
)

CHUNK_ASCONF_ACK asconf_ack_err {
	SerialNumber = RSERIAL;
	Param = errindt;
}

ErrorCauseIndication errindt {
	RequestID = INITTSN;
	Error = invalidparam;
}

InvalidMandatoryParameter invalidparam {
}

//
// SCTP CHUNK_HEARTBEAT
//
PKG_SCTP_NORM_RECV(
	sctp_chunk_heartbeat_link1,
	{
		_SRC(SCTP_NUT_NET0_ADDR);
		_DST(SCTP_TN_NET1_ADDR);
	},
	{
		chunk = chunk_heartbeat_link1;
	}
)

CHUNK_HEARTBEAT chunk_heartbeat_link1 {
	Information = any;
}

//
// SCTP CHUNK_HEARTBEAT_ACK
//
PKG_SCTP_NORM_SEND(
	sctp_chunk_heartbeat_ack_link1,
	{
		_SRC(SCTP_TN_NET1_ADDR);
		_DST(SCTP_NUT_NET0_ADDR);
	},
	{
		chunk = chunk_heartbeat_ack_link1;
	}
)

CHUNK_HEARTBEAT_ACK chunk_heartbeat_ack_link1 {
	Information = heartbeat_info;
}

HeartbeatInfo heartbeat_info {
#ifdef HBINFO
	Data = hexstr(HBINFO);
#endif
}

