// SCTP Conformance Test Suite Implementation
// (C) Copyright Fujitsu Ltd. 2008, 2009
//
// This file is part of the SCTP Conformance Test Suite implementation.
//
// The SCTP Conformance Test Suite implementation is free software;
// you can redistribute it and/or modify it under the terms of
// the GNU General Public License version 2 as published by
// the Free Software Foundation.
//
// The SCTP Conformance Test Suite implementation is distributed in the
// hope that it will be useful, but WITHOUT ANY WARRANTY; without even
// the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
// PURPOSE. See the GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with GNU CC; see the file COPYING.  If not, write to
// the Free Software Foundation, 59 Temple Place - Suite 330,
// Boston, MA 02111-1307, USA.
//
// Please send any bug reports or fixes you make to the
// email address(es):
//    networktest sctp <networktest-sctp@lists.sourceforge.net>
//
// Or submit a bug report through the following website:
//    http://networktest.sourceforge.net/
//
// Written or modified by:
//    Hiroaki Kago <linuxsctp-kg@ml.css.fujitsu.com>
//    Wei Yongjun <yjwei@cn.fujitsu.com>
//
// Any bugs reported given to us we will try to fix... any fixes shared will
// be incorporated into the next SCTP release.
//

#ifndef __STD_PKT_MULTI_COMMON_DEF_
#define __STD_PKT_MULTI_COMMON_DEF_	1

#include "../common/SCTP_COMMON.def"
#include "../common/STD_PKT_COMMON.def"

//
// SCTP CHUNK_INIT
//
#ifndef NO_STD_MULTI_SND_CHUNK_INIT
PKG_SCTP_FULL_SEND(
	sctp_chunk_init_snd_link1,
	{
		_SRC(SCTP_TN_NET1_ADDR);
		_DST(SCTP_NUT_NET1_ADDR);
	},
	{
		SourcePort = SCTP_TN0_PORT;
		DestinationPort = SCTP_NUT0_PORT;
	},
	{
		chunk = chunk_init_snd;
	}
)
#endif

//
// SCTP CHUNK_INIT
//
#ifndef NO_STD_MULTI_RCV_CHUNK_INIT
PKG_SCTP_FULL_RECV(
	sctp_chunk_init_rcv_link1,
	{
		_SRC(SCTP_NUT_NET1_ADDR);
		_DST(SCTP_TN_NET1_ADDR);
	},
	{
		SourcePort = SCTP_NUT0_PORT;
		DestinationPort = SCTP_TN0_PORT;
	},
	{
		chunk = chunk_init_rcv;
	}
)
#endif

//
// SCTP CHUNK_INIT_ACK
//
#ifndef NO_STD_MULTI_SND_CHUNK_INIT_ACK
PKG_SCTP_NORM_SEND(
	sctp_chunk_init_ack_snd_link1,
	{
		_SRC(SCTP_TN_NET1_ADDR);
		_DST(SCTP_NUT_NET1_ADDR);
	},
	{
		chunk = chunk_init_ack_snd;
	}
)
#endif

//
// SCTP CHUNK_INIT_ACK
//
#ifndef NO_STD_MULTI_RCV_CHUNK_INIT_ACK
PKG_SCTP_NORM_RECV(
	sctp_chunk_init_ack_rcv_link1,
	{
		_SRC(SCTP_NUT_NET1_ADDR);
		_DST(SCTP_TN_NET1_ADDR);
	},
	{
		chunk = chunk_init_ack_rcv;
	}
)
#endif

//
// SCTP CHUNK_COOKIE_ECHO
//
#ifndef NO_STD_MULTI_SND_CHUNK_COOKIE_ECHO
PKG_SCTP_NORM_SEND(
	sctp_chunk_cookie_echo_snd_link1,
	{
		_SRC(SCTP_TN_NET1_ADDR);
		_DST(SCTP_NUT_NET1_ADDR);
	},
	{
		chunk = cookie_echo_snd;
	}
)
#endif

//
// SCTP CHUNK_COOKIE_ECHO
//
#ifndef NO_STD_MULTI_RCV_CHUNK_COOKIE_ECHO
PKG_SCTP_NORM_RECV(
	sctp_chunk_cookie_echo_rcv_link1,
	{
		_SRC(SCTP_NUT_NET1_ADDR);
		_DST(SCTP_TN_NET1_ADDR);
	},
	{
		chunk = cookie_echo_rcv;
	}
)
#endif

//
// SCTP CHUNK_COOKIE_ACK
//
#ifndef NO_STD_MULTI_SND_CHUNK_COOKIE_ACK
PKG_SCTP_NORM_SEND(
	sctp_chunk_cookie_ack_snd_link1,
	{
		_SRC(SCTP_TN_NET1_ADDR);
		_DST(SCTP_NUT_NET1_ADDR);
	},
	{
		chunk = chunk_cookie_ack_snd;
	}
)
#endif

//
// SCTP CHUNK_COOKIE_ACK
//
#ifndef NO_STD_MULTI_RCV_CHUNK_COOKIE_ACK
PKG_SCTP_NORM_RECV(
	sctp_chunk_cookie_ack_rcv_link1,
	{
		_SRC(SCTP_NUT_NET1_ADDR);
		_DST(SCTP_TN_NET1_ADDR);
	},
	{
		chunk = chunk_cookie_ack_rcv;
	}
)
#endif

//
// SCTP CHUNK_DATA
//
#ifndef NO_STD_MULTI_SND_CHUNK_DATA
PKG_SCTP_NORM_SEND(
	sctp_chunk_data_snd_link1,
	{
		_SRC(SCTP_TN_NET1_ADDR);
		_DST(SCTP_NUT_NET1_ADDR);
	},
	{
		chunk = chunk_data_snd;
	}
)
#endif

//
// SCTP CHUNK_DATA
//
#ifndef NO_STD_MULTI_RCV_CHUNK_DATA
PKG_SCTP_NORM_RECV(
	sctp_chunk_data_rcv_link1,
	{
		_SRC(SCTP_NUT_NET1_ADDR);
		_DST(SCTP_TN_NET1_ADDR);
	},
	{
		chunk = chunk_data_rcv;
	}
)
#endif

//
// SCTP CHUNK_SACK
//
#ifndef NO_STD_MULTI_SND_CHUNK_SACK
PKG_SCTP_NORM_SEND(
	sctp_chunk_sack_snd_link1,
	{
		_SRC(SCTP_TN_NET1_ADDR);
		_DST(SCTP_NUT_NET1_ADDR);
	},
	{
		chunk = chunk_sack_snd;
	}
)
#endif

//
// SCTP CHUNK_SACK
//
#ifndef NO_STD_MULTI_RCV_CHUNK_SACK
PKG_SCTP_NORM_RECV(
	sctp_chunk_sack_rcv_link1,
	{
		_SRC(SCTP_NUT_NET1_ADDR);
		_DST(SCTP_TN_NET1_ADDR);
	},
	{
		chunk = chunk_sack_rcv;
	}
)
#endif

//
// SCTP CHUNK_SHUTDOWN
//
#ifndef NO_STD_MULTI_SND_CHUNK_SHUTDOWN
PKG_SCTP_NORM_SEND(
	sctp_chunk_shutdown_snd_link1,
	{
		_SRC(SCTP_TN_NET1_ADDR);
		_DST(SCTP_NUT_NET1_ADDR);
	},
	{
		chunk = chunk_shutdown_snd;
	}
)
#endif

//
// SCTP CHUNK_SHUTDOWN
//
#ifndef NO_STD_MULTI_RCV_CHUNK_SHUTDOWN
PKG_SCTP_NORM_RECV(
	sctp_chunk_shutdown_rcv_link1,
	{
		_SRC(SCTP_NUT_NET1_ADDR);
		_DST(SCTP_TN_NET1_ADDR);
	},
	{
		chunk = chunk_shutdown_rcv;
	}
)
#endif

//
// SCTP CHUNK_SHUTDOWN_ACK
//
#ifndef NO_STD_MULTI_SND_CHUNK_SHUTDOWN_ACK
PKG_SCTP_NORM_SEND(
	sctp_chunk_shutdown_ack_snd_link1,
	{
		_SRC(SCTP_TN_NET1_ADDR);
		_DST(SCTP_NUT_NET1_ADDR);
	},
	{
		chunk = chunk_shutdown_ack_snd;
	}
)
#endif

//
// SCTP CHUNK_SHUTDOWN_ACK
//
#ifndef NO_STD_MULTI_RCV_CHUNK_SHUTDOWN_ACK
PKG_SCTP_NORM_RECV(
	sctp_chunk_shutdown_ack_rcv_link1,
	{
		_SRC(SCTP_NUT_NET1_ADDR);
		_DST(SCTP_TN_NET1_ADDR);
	},
	{
		chunk = chunk_shutdown_ack_rcv;
	}
)
#endif

//
// SCTP CHUNK_SHUTDOWN_COMPLETE
//
#ifndef NO_STD_MULTI_SND_CHUNK_SHUTDOWN_COMPLETE
PKG_SCTP_NORM_SEND(
	sctp_chunk_shutdown_complete_snd_link1,
	{
		_SRC(SCTP_TN_NET1_ADDR);
		_DST(SCTP_NUT_NET1_ADDR);
	},
	{
		chunk = chunk_shutdown_complete_snd;
	}
)
#endif

//
// SCTP CHUNK_SHUTDOWN_COMPLETE
//
#ifndef NO_STD_MULTI_RCV_CHUNK_SHUTDOWN_COMPLETE
PKG_SCTP_NORM_RECV(
	sctp_chunk_shutdown_complete_rcv_link1,
	{
		_SRC(SCTP_NUT_NET1_ADDR);
		_DST(SCTP_TN_NET1_ADDR);
	},
	{
		chunk = chunk_shutdown_complete_rcv;
	}
)
#endif

//
// SCTP CHUNK_ABORT
//
#ifndef NO_STD_MULTI_SND_CHUNK_ABORT
PKG_SCTP_NORM_SEND(
	sctp_chunk_abort_snd_link1,
	{
		_SRC(SCTP_TN_NET1_ADDR);
		_DST(SCTP_NUT_NET1_ADDR);
	},
	{
		chunk = chunk_abort_snd;
	}
)
#endif

//
// SCTP CHUNK_ABORT
//
#ifndef NO_STD_MULTI_RCV_CHUNK_ABORT
PKG_SCTP_FULL_RECV(
	sctp_chunk_abort_rcv_link1,
	{
		_SRC(SCTP_NUT_NET1_ADDR);
		_DST(SCTP_TN_NET1_ADDR);
	},
	{
		SourcePort = SCTP_NUT0_PORT;
		DestinationPort = SCTP_TN0_PORT;
		VerificationTag = oneof(VERFTAG, INITTAG);
	},
	{
		chunk = chunk_abort_rcv;
	}
)
#endif

//
// SCTP CHUNK_ANY
//
#ifndef NO_STD_MULTI_RCV_CHUNK_ANY
PKG_SCTP_NORM_RECV(
	sctp_chunk_any_rcv_link1,
	{
		_SRC(SCTP_NUT_NET1_ADDR);
		_DST(SCTP_TN_NET1_ADDR);
	},
	{
		chunk = stop;
	}
)
#endif

#endif // #ifndef __STD_PKT_MULTI_COMMON_DEF_
