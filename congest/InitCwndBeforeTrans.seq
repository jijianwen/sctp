#!/usr/bin/perl
#
# SCTP Conformance Test Suite Implementation
# (C) Copyright Fujitsu Ltd. 2008, 2009
#
# This file is part of the SCTP Conformance Test Suite implementation.
#
# The SCTP Conformance Test Suite implementation is free software;
# you can redistribute it and/or modify it under the terms of
# the GNU General Public License version 2 as published by
# the Free Software Foundation.
#
# The SCTP Conformance Test Suite implementation is distributed in the
# hope that it will be useful, but WITHOUT ANY WARRANTY; without even
# the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
# PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with GNU CC; see the file COPYING.  If not, write to
# the Free Software Foundation, 59 Temple Place - Suite 330,
# Boston, MA 02111-1307, USA.
#
# Please send any bug reports or fixes you make to the
# email address(es):
#    networktest sctp <networktest-sctp@lists.sourceforge.net>
#
# Or submit a bug report through the following website:
#    http://networktest.sourceforge.net/
#
# Written or modified by:
#    Hiroaki Kago <linuxsctp-kg@ml.css.fujitsu.com>
#    Wei Yongjun <yjwei@cn.fujitsu.com>
#
# Any bugs reported given to us we will try to fix... any fixes shared will
# be incorporated into the next SCTP release.
#
##############################################################################
BEGIN {	$V6evalTool::TestVersion = '$Name: REL_1_0_2 $'; }

use lib "../common";
use V6evalTool;
use SCTP;

%pktdesc = ();

$IF0 = Link0;

vCapture($IF0);

sctpCheckEnv($IF0);

sctpStatusServer($IF0);

vConnect($IF0);

vSendMsg($IF0);

vClose($IF0);

@cwnds = (4380);
$cwnds[@cwnds] = '-';
@ret = sctpGetRemoteStatus(@cwnds);
for($i = 0; $i < @cwnds; $i++) {
	if((!defined($ret[$i]) && $cwnds[$i] != '-') || $cwnds[$i] != $ret[$i]) {
		vLogHTML(sprintf("The initial cwnd is not update correctly, except %s, but get %s<BR>",
					$cwnds[$i] == '-' ? "NO CHANGE" : $cwnds[$i],
					defined($ret[$i]) ? $ret[$i]: "NO CHANGE"));
		vLogHTML('<FONT COLOR="#FF0000">NG</FONT>'); 
		exit $V6evalTool::exitFail;
	}
}

vLogHTML(OK);
exit $V6evalTool::exitPass;

######################################################################
__END__

=head1 NAME

  InitCwndBeforeTrans.seq - The initial cwnd before DATA transmission MUST be set to min(4*MTU, max (2*MTU, 4380bytes))

=head1 PURPOSE

  To check that the initial cwnd before DATA transmission is set to 
  min(4*MTU, max (2*MTU, 4380 bytes)).

=head1 SYNOPSIS

=begin html
<PRE>
  <A HREF="./InitCwndBeforeTrans.seq">./InitCwndBeforeTrans.seq</A> [-tooloption ...] -pkt <A HREF="./InitCwndBeforeTrans.def">./InitCwndBeforeTrans.def</A>
    -tooloption : v6eval tool option
  See Also: <A HREF="../common/STD_PKT_COMMON.def">../common/STD_PKT_COMMON.def</A>
            <A HREF="../common/SCTP_COMMON.def">../common/SCTP_COMMON.def</A>
</PRE>

=end html

=head1 PRE-TEST CONDITION

  Association not established between endpoint A and B. Also arrange 
  the data in endpoint B such that upper layers send Associate 
  primitive to startup an association with endpoint A.

=head1 TEST PROCEDURE

  Endpoint A                            Endpoint B         ULP
  (CLOSED)                              (CLOSED) 
  
                                                   <-----    Associate
  
                  <----------------       INIT
  
  INIT_ACK        ----------------->
  
                  <-----------------     COOKIE-ECHO

  COOKIE_ACK      ------------------> 
                                         Communication Up ---->

  TEST DESCRIPTION:

  1. Check that the initial cwnd before DATA transmission is set to
     min(4*MTU, max (2*MTU, 4380 bytes)).

=head1 NOTE

  None

=head1 REFERENCE

  RFC 4960

  7.2.1.  Slow-Start

    Beginning data transmission into a network with unknown conditions or
    after a sufficiently long idle period requires SCTP to probe the
    network to determine the available capacity.  The slow-start
    algorithm is used for this purpose at the beginning of a transfer, or
    after repairing loss detected by the retransmission timer.

=begin html
<PRE>
    <B>o  The initial cwnd before DATA transmission or after a sufficiently
       long idle period MUST be set to min(4*MTU, max (2*MTU, 4380
       bytes)).</B>
</PRE>

=end html

    o  The initial cwnd after a retransmission timeout MUST be no more
       than 1*MTU.

    o  The initial value of ssthresh MAY be arbitrarily high (for
       example, implementations MAY use the size of the receiver
       advertised window).

    o  Whenever cwnd is greater than zero, the endpoint is allowed to
       have cwnd bytes of data outstanding on that transport address.

    o  When cwnd is less than or equal to ssthresh, an SCTP endpoint MUST
       use the slow-start algorithm to increase cwnd only if the current
       congestion window is being fully utilized, an incoming SACK
       advances the Cumulative TSN Ack Point, and the data sender is not
       in Fast Recovery.  Only when these three conditions are met can
       the cwnd be increased; otherwise, the cwnd MUST not be increased.
       If these conditions are met, then cwnd MUST be increased by, at
       most, the lesser of 1) the total size of the previously
       outstanding DATA chunk(s) acknowledged, and 2) the destination's
       path MTU.  This upper bound protects against the ACK-Splitting
       attack outlined in [SAVAGE99].

    In instances where its peer endpoint is multi-homed, if an endpoint
    receives a SACK that advances its Cumulative TSN Ack Point, then it
    should update its cwnd (or cwnds) apportioned to the destination
    addresses to which it transmitted the acknowledged data.  However, if
    the received SACK does not advance the Cumulative TSN Ack Point, the
    endpoint MUST NOT adjust the cwnd of any of the destination
    addresses.

    Because an endpoint's cwnd is not tied to its Cumulative TSN Ack
    Point, as duplicate SACKs come in, even though they may not advance
    the Cumulative TSN Ack Point an endpoint can still use them to clock
    out new data.  That is, the data newly acknowledged by the SACK
    diminishes the amount of data now in flight to less than cwnd, and so
    the current, unchanged value of cwnd now allows new data to be sent.
    On the other hand, the increase of cwnd must be tied to the
    Cumulative TSN Ack Point advancement as specified above.  Otherwise,
    the duplicate SACKs will not only clock out new data, but also will
    adversely clock out more new data than what has just left the
    network, during a time of possible congestion.

    o  When the endpoint does not transmit data on a given transport
       address, the cwnd of the transport address should be adjusted to
       max(cwnd/2, 4*MTU) per RTO.

