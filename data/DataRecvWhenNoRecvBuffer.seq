#!/usr/bin/perl
#
# SCTP Conformance Test Suite Implementation
# (C) Copyright Fujitsu Ltd. 2008, 2009, 2010
#
# This file is part of the SCTP Conformance Test Suite implementation.
#
# The SCTP Conformance Test Suite implementation is free software;
# you can redistribute it and/or modify it under the terms of
# the GNU General Public License version 2 as published by
# the Free Software Foundation.
#
# The SCTP Conformance Test Suite implementation is distributed in the
# hope that it will be useful, but WITHOUT ANY WARRANTY; without even
# the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
# PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with GNU CC; see the file COPYING.  If not, write to
# the Free Software Foundation, 59 Temple Place - Suite 330,
# Boston, MA 02111-1307, USA.
#
# Please send any bug reports or fixes you make to the
# email address(es):
#    networktest sctp <networktest-sctp@lists.sourceforge.net>
#
# Or submit a bug report through the following website:
#    http://networktest.sourceforge.net/
#
# Written or modified by:
#    Hiroaki Kago <linuxsctp-kg@ml.css.fujitsu.com>
#    Wei Yongjun <yjwei@cn.fujitsu.com>
#
# Any bugs reported given to us we will try to fix... any fixes shared will
# be incorporated into the next SCTP release.
#
##############################################################################
BEGIN {	$V6evalTool::TestVersion = '$Name: REL_1_0_2 $'; }

use lib "../common";
use V6evalTool;
use SCTP;

%pktdesc = (
	sctp_chunk_data_rcv_frag_all	=> "Recv SCTP CHUNK_DATA (all)",
	sctp_chunk_sack_snd_frag_all	=> "Send SCTP CHUNK_SACK (all)",
	sctp_chunk_data_and_sack_12	=> "Recv SCTP CHUNK_SACK and CHUNK_DATA",
	sctp_chunk_sack_snd_frag12	=> "Send SCTP CHUNK_SACK",
);

$IF0 = Link0;

vCapture($IF0);

sctpCheckEnv($IF0);

sctpStartEchoServer($IF0, "-m 1500");

vConnect($IF0);

vLogHTML('<B>================ Main Test =================</B>');

$count = 12;
for($i = 0; $i <= $count; $i++) {
	$pktdesc{"sctp_chunk_data_snd_frag$i"} = "Send SCTP CHUNK_DATA ($i)";
	$pktdesc{"sctp_chunk_sack_rcv_frag$i"} = "Recv SCTP CHUNK_SACK ($i)";
}

for($sndcnt = 0; $sndcnt < $count; $sndcnt++) {
	vSend($IF0, "sctp_chunk_data_snd_frag$sndcnt");

	%ret = vWarpRecv($IF0, 10, 0, 0, "sctp_chunk_sack_rcv_frag$sndcnt");
	if($ret{status} != 0 || $ret{recvFrame} ne "sctp_chunk_sack_rcv_frag$sndcnt") {
		vLogHTML('Cannot receive SCTP CHUNK_SACK<BR>');
		vSend($IF0, sctp_chunk_abort_snd);
		vLogHTML('<FONT COLOR="#00FF00">NG</FONT>'); 
		exit $V6evalTool::exitFail;
	}
}

vSend($IF0, sctp_chunk_data_snd_frag12);

%ret = vWarpRecv($IF0, 10, 0, 0, sctp_chunk_sack_rcv_frag11);
if($ret{status} != 0 || $ret{recvFrame} ne sctp_chunk_sack_rcv_frag11) {
	vLogHTML('Cannot receive SCTP CHUNK_SACK<BR>');
	vSend($IF0, sctp_chunk_abort_snd);
	vLogHTML('<FONT COLOR="#00FF00">NG</FONT>'); 
	exit $V6evalTool::exitFail;
}

%ret = vWarpRecv($IF0, 10, 0, 0, sctp_chunk_data_rcv_frag_all);
if($ret{status} != 0 || $ret{recvFrame} ne sctp_chunk_data_rcv_frag_all) {
	vLogHTML('Cannot receive SCTP CHUNK_DATA<BR>');
	vSend($IF0, sctp_chunk_abort_snd);
	vLogHTML('<FONT COLOR="#00FF00">NG</FONT>'); 
	exit $V6evalTool::exitFail;
}

vSend($IF0, sctp_chunk_sack_snd_frag_all);

vSend($IF0, sctp_chunk_data_snd_frag12);

%ret = vWarpRecv($IF0, 10, 0, 0, sctp_chunk_sack_rcv_frag12, sctp_chunk_data_and_sack_12);
if($ret{status} != 0 || ($ret{recvFrame} ne sctp_chunk_sack_rcv_frag12 &&
			 $ret{recvFrame} ne sctp_chunk_data_and_sack_12)) {
	vLogHTML('Cannot receive SCTP CHUNK_SACK<BR>');
	vSend($IF0, sctp_chunk_abort_snd);
	vLogHTML('<FONT COLOR="#00FF00">NG</FONT>'); 
	exit $V6evalTool::exitFail;
}

if ($ret{recvFrame} eq sctp_chunk_sack_rcv_frag12) {
	%ret = vWarpRecv($IF0, 10, 0, 0, sctp_chunk_data_rcv_frag12);
	if($ret{status} != 0 || $ret{recvFrame} ne sctp_chunk_data_rcv_frag12) {
		vLogHTML('Cannot receive SCTP CHUNK_DATA<BR>');
		vSend($IF0, sctp_chunk_abort_snd);
		vLogHTML('<FONT COLOR="#00FF00">NG</FONT>'); 
		exit $V6evalTool::exitFail;
	}
}

vSend($IF0, sctp_chunk_sack_snd_frag12);

sctpUpdateRecvACK(2);

vClose($IF0);

vLogHTML(OK);
exit $V6evalTool::exitPass;

######################################################################
__END__

=head1 NAME

  DataRecvWhenNoRecvBuffer.seq - DATA chunk is received when exhaust the receiver buffer without fully closing receive window

=head1 PURPOSE

  To check that if small chunks are used to exhaust the receiver buffer
  without fully closing receive window then the endpoint should drop the
  receive window to 0.

=head1 SYNOPSIS

=begin html
<PRE>
  <A HREF="./DataRecvWhenNoRecvBuffer.seq">./DataRecvWhenNoRecvBuffer.seq</A> [-tooloption ...] -pkt <A HREF="./DataRecvWhenNoRecvBuffer.def">./DataRecvWhenNoRecvBuffer.def</A>
    -tooloption : v6eval tool option
  See Also: <A HREF="../common/STD_PKT_COMMON.def">../common/STD_PKT_COMMON.def</A>
            <A HREF="../common/SCTP_COMMON.def">../common/SCTP_COMMON.def</A>
</PRE>

=end html

=head1 PRE-TEST CONDITION

  Association is established between endpoint A and B. Arrange data 
  in endpoint A such that fragmented DATA messages are sent to the
  endpoint B for reassembly.

=head1 TEST PROCEDURE

  Endpoint A                           Endpoint B                ULP
  (ESTABLISHED)                        (ESTABLISHED)

  DATA          ---------------->
  [TSN=0,B=1,E=0]
                <----------------       SACK

  DATA          ---------------->
  [TSN=1,B=0,E=0]
                <----------------       SACK
                     ......
  DATA          ---------------->
  [TSN=11,B=0,E=0]
                <----------------       SACK
	                                (AdvRecvWindow = 0)
  DATA          ---------------->
  [TSN=12,B=0,E=1]
                <----------------       SACK
	                                (AdvRecvWindow = 0)

  TEST DESCRIPTION:

  1. Send DATA from endpoint A to B with B=1, E=0.
  2. Check A: DATA is not delivered to the ULP.
  3. Send DATA from endpoint A to B with B=0, E=0 until the
     data receiver runs out of buffer space.
  4. Check B: SACK is sent to endpoint A with zero receive
     window and Fragmented DATA chunks is delivered to the ULP
     after reassemble and be send back.

=head1 NOTE

  None

=head1 REFERENCE

  RFC 4960

    http://git.kernel.org/?p=linux/kernel/git/torvalds/linux-2.6.git;a=commit;h=4d3c46e6833208428d366630aa708f6876e61fc1

    SCTP has a problem that when small chunks are used, it is possible
    to exhaust the receiver buffer without fully closing receive window.
    This happens due to all overhead that we have account for with small
    messages.  To fix this, when receive buffer is exceeded, we'll drop
    the window to 0 and save the 'drop' portion.  When application starts
    reading data and freeing up recevie buffer space, we'll wait until
    we've reached the 'drop' window and then add back this 'drop' one
    mtu at a time.  This worked well in testing and under stress produced
    rather even recovery.

