#!/usr/bin/perl
#
# SCTP Conformance Test Suite Implementation
# (C) Copyright Fujitsu Ltd. 2008, 2009, 2010
#
# This file is part of the SCTP Conformance Test Suite implementation.
#
# The SCTP Conformance Test Suite implementation is free software;
# you can redistribute it and/or modify it under the terms of
# the GNU General Public License version 2 as published by
# the Free Software Foundation.
#
# The SCTP Conformance Test Suite implementation is distributed in the
# hope that it will be useful, but WITHOUT ANY WARRANTY; without even
# the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
# PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with GNU CC; see the file COPYING.  If not, write to
# the Free Software Foundation, 59 Temple Place - Suite 330,
# Boston, MA 02111-1307, USA.
#
# Please send any bug reports or fixes you make to the
# email address(es):
#    networktest sctp <networktest-sctp@lists.sourceforge.net>
#
# Or submit a bug report through the following website:
#    http://networktest.sourceforge.net/
#
# Written or modified by:
#    Hiroaki Kago <linuxsctp-kg@ml.css.fujitsu.com>
#    Wei Yongjun <yjwei@cn.fujitsu.com>
#
# Any bugs reported given to us we will try to fix... any fixes shared will
# be incorporated into the next SCTP release.
#
##############################################################################
BEGIN {	$V6evalTool::TestVersion = '$Name: REL_1_0_2 $'; }

use lib "../common";
use V6evalTool;
use SCTP;

%pktdesc = ();

$IF0 = Link0;

vCapture($IF0);

sctpCheckEnv($IF0);

sctpStartServer($IF0);

vConnect($IF0);

vLogHTML('<B>================ Main Test =================</B>');

vSendMsg($IF0);

sctpUpdateSendTSN();
vSend($IF0, sctp_chunk_data_snd);

sctpUpdateSendTSN();
vSend($IF0, sctp_chunk_data_snd);

%ret = vWarpRecv($IF0, 10, 0, 0, sctp_chunk_sack_rcv, sctp_chunk_sack_old);
if($ret{status} != 0 || ($ret{recvFrame} ne sctp_chunk_sack_rcv && $ret{recvFrame} ne sctp_chunk_sack_old)) {
	vLogHTML('Cannot receive SCTP CHUNK_SACK<BR>');
	vLogHTML('<FONT COLOR="#00FF00">NG</FONT>'); 
	exit $V6evalTool::exitFail;
}

if ($ret{status} == 0 && $ret{recvFrame} eq sctp_chunk_sack_old) {
	vSend($IF0, sctp_chunk_abort_snd);
	vLogHTML('Received unexpected SCTP CHUNK_SACK with old TSN<BR>');
	vLogHTML('<FONT COLOR="#00FF00">NG</FONT>'); 
	exit $V6evalTool::exitFail;
}

vSendMsg($IF0);

vClose($IF0);

vLogHTML(OK);
exit $V6evalTool::exitPass;

######################################################################
__END__

=head1 NAME

  SACK_MultiDataChunks.seq - A SACK chunk can acknowledge the reception of multiple DATA chunks

=head1 PURPOSE

  To check that SACK chunk can be send to acknowledge the reception
  of multiple DATA chunks.

=head1 SYNOPSIS

=begin html
<PRE>
  <A HREF="./SACK_MultiDataChunks.seq">./SACK_MultiDataChunks.seq</A> [-tooloption ...] -pkt <A HREF="./SACK_MultiDataChunks.def">./SACK_MultiDataChunks.def</A>
    -tooloption : v6eval tool option
  See Also: <A HREF="../common/STD_PKT_COMMON.def">../common/STD_PKT_COMMON.def</A>
            <A HREF="../common/SCTP_COMMON.def">../common/SCTP_COMMON.def</A>
</PRE>

=end html

=head1 PRE-TEST CONDITION

  Association is established between endpoint A and B. Arrange the data
  in endpoint A such that multiple DATA messages are sent to endpoint B.

=head1 TEST PROCEDURE

  Endpoint A                           Endpoint B                ULP
  (ESTABLISHED)                        (ESTABLISHED)

  DATA 1        ----------------->

                <-----------------      SACK

  DATA 2        ----------------->

  DATA 3        ----------------->

                <-----------------      SACK (ACK DATA 2 and DATA 3)

  TEST DESCRIPTION:

  1. Send DATA 1 from endpoint A to B and immediately received a SACK.
  2. Send DATA 2 and DATA 3 from endpoint A to B.
  3. Check A: A SACK is send to acknowledge the reception of multiple
     DATA chunks from endpoint B.

=head1 NOTE

  None

=head1 REFERENCE

  RFC 4960

  6.2.  Acknowledgement on Reception of DATA Chunks

=begin html
<PRE>
    Acknowledgements MUST be sent in SACK chunks unless shutdown was
    requested by the ULP, in which case an endpoint MAY send an
    acknowledgement in the SHUTDOWN chunk.  <B>A SACK chunk can acknowledge
    the reception of multiple DATA chunks.  See Section 3.3.4 for SACK
    chunk format.  In particular, the SCTP endpoint MUST fill in the
    Cumulative TSN Ack field to indicate the latest sequential TSN (of a
    valid DATA chunk) it has received.</B>  Any received DATA chunks with TSN
    greater than the value in the Cumulative TSN Ack field are reported
    in the Gap Ack Block fields.  The SCTP endpoint MUST report as many
    Gap Ack Blocks as can fit in a single SACK chunk limited by the
    current path MTU.
</PRE>

=end html

