#!/usr/bin/perl
#
# SCTP Conformance Test Suite Implementation
# (C) Copyright Fujitsu Ltd. 2008, 2009, 2010
#
# This file is part of the SCTP Conformance Test Suite implementation.
#
# The SCTP Conformance Test Suite implementation is free software;
# you can redistribute it and/or modify it under the terms of
# the GNU General Public License version 2 as published by
# the Free Software Foundation.
#
# The SCTP Conformance Test Suite implementation is distributed in the
# hope that it will be useful, but WITHOUT ANY WARRANTY; without even
# the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
# PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with GNU CC; see the file COPYING.  If not, write to
# the Free Software Foundation, 59 Temple Place - Suite 330,
# Boston, MA 02111-1307, USA.
#
# Please send any bug reports or fixes you make to the
# email address(es):
#    networktest sctp <networktest-sctp@lists.sourceforge.net>
#
# Or submit a bug report through the following website:
#    http://networktest.sourceforge.net/
#
# Written or modified by:
#    Hiroaki Kago <linuxsctp-kg@ml.css.fujitsu.com>
#    Wei Yongjun <yjwei@cn.fujitsu.com>
#
# Any bugs reported given to us we will try to fix... any fixes shared will
# be incorporated into the next SCTP release.
#
##############################################################################
BEGIN {	$V6evalTool::TestVersion = '$Name: REL_1_0_3 $'; }

use lib "../common";
use V6evalTool;
use SCTP;

%pktdesc = (
	sctp_chunk_error_bad_str	=> "Send SCTP CHUNK_ERROR (with Invalid Stream Identifier)",
);

$IF0 = Link0;

vCapture($IF0);

sctpCheckEnv($IF0);

sctpStartEchoClient($IF0);

vListen($IF0);

vAccept($IF0);

vLogHTML('<B>================ Main Test =================</B>');

sctpUpdateRecvACK();

%ret = vWarpRecv($IF0, 10, 0, 0, sctp_chunk_data_rcv);
if($ret{status} != 0 || $ret{recvFrame} ne sctp_chunk_data_rcv) {
	vLogHTML('Cannot receive SCTP CHUNK_DATA<BR>');
	vLogHTML('<FONT COLOR="#00FF00">NG</FONT>'); 
	exit $V6evalTool::exitFail;
}

vSend($IF0, sctp_chunk_error_bad_str);
vSend($IF0, sctp_chunk_sack_snd);

vClose($IF0);

vLogHTML(OK);
exit $V6evalTool::exitPass;

######################################################################
__END__

=head1 NAME

  ErrorInEstab.seq - ERROR chunk is received with Invalid Stream Identifier in ESTABLISHED state

=head1 PURPOSE

  To chech that if ERROR chunk is received with Invalid Stream Identifier
  in ESTABLISHED state then the endpoint should report this error.

=head1 SYNOPSIS

=begin html
<PRE>
  <A HREF="./ErrorInEstab.seq">./ErrorInEstab.seq</A> [-tooloption ...] -pkt <A HREF="./ErrorInEstab.def">./ErrorInEstab.def</A>
    -tooloption : v6eval tool option
  See Also: <A HREF="../common/STD_PKT_COMMON.def">../common/STD_PKT_COMMON.def</A>
            <A HREF="../common/SCTP_COMMON.def">../common/SCTP_COMMON.def</A>
</PRE>

=end html

=head1 PRE-TEST CONDITION

  Association is established between endpoint A and B. Arrange data
  in endpoint A such that ERROR chunk is sent with Invalid Stream
  Identifier to endpoint B.

=head1 TEST PROCEDURE

  Endpoint A                           Endpoint B                ULP
  (ESTABLISHED)                        (ESTABLISHED)

                <-----------------      DATA

  ERROR         ----------------->
  (with Invalid Stream Identifier)
  SACK          ----------------->

  TEST DESCRIPTION:

  1. Send ERROR chunk from endpoint B to A with invalid stream
     identifier after received DATA message.
  2. Send SACK chunk from endpoint B to A.
  3. Check A: Error is report to ULP.

=head1 NOTE

  None

=head1 REFERENCE

  RFC 4960

  3.3.10.1.  Invalid Stream Identifier (1)

    Cause of error
    ---------------

    Invalid Stream Identifier: Indicates endpoint received a DATA chunk
    sent to a nonexistent stream.

       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
       |     Cause Code=1              |      Cause Length=8           |
       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
       |        Stream Identifier      |         (Reserved)            |
       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

    Stream Identifier: 16 bits (unsigned integer)

      Contains the Stream Identifier of the DATA chunk received in
      error.

    Reserved: 16 bits

      This field is reserved.  It is set to all 0's on transmit and
      ignored on receipt.

