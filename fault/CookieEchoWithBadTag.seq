#!/usr/bin/perl
#
# SCTP Conformance Test Suite Implementation
# (C) Copyright Fujitsu Ltd. 2008, 2009, 2010
#
# This file is part of the SCTP Conformance Test Suite implementation.
#
# The SCTP Conformance Test Suite implementation is free software;
# you can redistribute it and/or modify it under the terms of
# the GNU General Public License version 2 as published by
# the Free Software Foundation.
#
# The SCTP Conformance Test Suite implementation is distributed in the
# hope that it will be useful, but WITHOUT ANY WARRANTY; without even
# the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
# PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with GNU CC; see the file COPYING.  If not, write to
# the Free Software Foundation, 59 Temple Place - Suite 330,
# Boston, MA 02111-1307, USA.
#
# Please send any bug reports or fixes you make to the
# email address(es):
#    networktest sctp <networktest-sctp@lists.sourceforge.net>
#
# Or submit a bug report through the following website:
#    http://networktest.sourceforge.net/
#
# Written or modified by:
#    Hiroaki Kago <linuxsctp-kg@ml.css.fujitsu.com>
#    Wei Yongjun <yjwei@cn.fujitsu.com>
#
# Any bugs reported given to us we will try to fix... any fixes shared will
# be incorporated into the next SCTP release.
#
##############################################################################
BEGIN {	$V6evalTool::TestVersion = '$Name: REL_1_0_2 $'; }

use lib "../common";
use V6evalTool;
use SCTP;

%pktdesc = (
	sctp_chunk_cookie_echo_bad_tag	=> "Send SCTP CHUNK_COOKIE_ECHO (with invalid Verification Tag)",
);

$IF0 = Link0;

vCapture($IF0);

sctpCheckEnv($IF0);

sctpStartServer($IF0);

vLogHTML('================= vConnect =================');

vSend($IF0, sctp_chunk_init_snd);

%ret = vWarpRecv3($IF0, 10, 0, 0, sctp_chunk_init_ack_rcv);
if($ret{status} != 0 || $ret{recvFrame} ne sctp_chunk_init_ack_rcv) {
	vLogHTML('Cannot receive SCTP CHUNK_INIT_ACK<BR>');
	vLogHTML('<FONT COLOR="#FF0000">NG</FONT>'); 
	exit $V6evalTool::exitFail;
}

sctpFetchInitField(\%ret);

vLogHTML('<B>================ Main Test =================</B>');

vSend($IF0, sctp_chunk_cookie_echo_bad_tag);

%ret = vWarpRecv($IF0, 5, 0, 0, sctp_chunk_cookie_ack_rcv);
if($ret{status} == 0 && $ret{recvFrame} eq sctp_chunk_cookie_ack_rcv) {
	vLogHTML('Receive unexpected SCTP CHUNK_COOKIE_ACK<BR>');
	vLogHTML('<FONT COLOR="#00FF00">NG</FONT>'); 
	exit $V6evalTool::exitFail;
}

vSend($IF0, sctp_chunk_cookie_echo_snd);

%ret = vWarpRecv($IF0, 5, 0, 0, sctp_chunk_cookie_ack_rcv);
if($ret{status} != 0 || $ret{recvFrame} ne sctp_chunk_cookie_ack_rcv) {
	vLogHTML('Cannot receive SCTP CHUNK_COOKIE_ACK<BR>');
	vLogHTML('<FONT COLOR="#00FF00">NG</FONT>'); 
	exit $V6evalTool::exitFail;
}

vSendMsg($IF0);

vClose($IF0);

vLogHTML(OK);
exit $V6evalTool::exitPass;

######################################################################
__END__

=head1 NAME

  CookieEchoWithBadTag.seq - COOKIE-ECHO chunk is received with invalid Verification Tag

=head1 PURPOSE

  To check that if COOKIE-ECHO is received chunk with invalid Verification
  Tag and T bit is set, the endpoint should silently discard the packet
  and take no further action.

=head1 SYNOPSIS

=begin html
<PRE>
  <A HREF="./CookieEchoWithBadTag.seq">./CookieEchoWithBadTag.seq</A> [-tooloption ...] -pkt <A HREF="./CookieEchoWithBadTag.def">./CookieEchoWithBadTag.def</A>
    -tooloption : v6eval tool option
  See Also: <A HREF="../common/STD_PKT_COMMON.def">../common/STD_PKT_COMMON.def</A>
            <A HREF="../common/SCTP_COMMON.def">../common/SCTP_COMMON.def</A>
</PRE>

=end html

=head1 PRE-TEST CONDITION

  Association is not established between endpoint A an B. Arrange the
  data in endpoint A such that COOKIE-ECHO message with a different
  verification tag (different from what received in INIT-ACK) is sent
  in response to INIT-ACK.

=head1 TEST PROCEDURE

  Endpoint A                           Endpoint B                ULP
  (CLOSED)                             (CLOSED)

  INIT            ---------------->

                  <-----------------     INIT-ACK
  
  COOKIE-ECHO     ----------------->     Silently discard
  (with invalid Verification Tag)
  COOKIE-ECHO     ----------------->

                  <------------------    COOKIE-ACK

  TEST DESCRIPTION:

  1. Attempt to initiate an association from endpoint A to B. Send 
     COOKIE-ECHO message (in response to INIT-ACK) with verification 
     tag value different from received in INIT-ACK.
     Record the message sequence using a signal emulator.
  2. Check A: COOKIE-ECHO message is silently discarded.
  3. Check B: Was the message sequence as above. 

=head1 NOTE

  None

=head1 REFERENCE

  RFC 4960

  8.5.1.  Exceptions in Verification Tag Rules

    D) Rules for packet carrying a COOKIE ECHO

=begin html
<PRE>
    -   When sending a COOKIE ECHO, the endpoint MUST use the value of
        the Initiate Tag received in the INIT ACK.
</PRE>

=end html

    -   The receiver of a COOKIE ECHO follows the procedures in Section
        5.

