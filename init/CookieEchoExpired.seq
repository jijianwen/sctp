#!/usr/bin/perl
#
# SCTP Conformance Test Suite Implementation
# (C) Copyright Fujitsu Ltd. 2008, 2009
#
# This file is part of the SCTP Conformance Test Suite implementation.
#
# The SCTP Conformance Test Suite implementation is free software;
# you can redistribute it and/or modify it under the terms of
# the GNU General Public License version 2 as published by
# the Free Software Foundation.
#
# The SCTP Conformance Test Suite implementation is distributed in the
# hope that it will be useful, but WITHOUT ANY WARRANTY; without even
# the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
# PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with GNU CC; see the file COPYING.  If not, write to
# the Free Software Foundation, 59 Temple Place - Suite 330,
# Boston, MA 02111-1307, USA.
#
# Please send any bug reports or fixes you make to the
# email address(es):
#    networktest sctp <networktest-sctp@lists.sourceforge.net>
#
# Or submit a bug report through the following website:
#    http://networktest.sourceforge.net/
#
# Written or modified by:
#    Hiroaki Kago <linuxsctp-kg@ml.css.fujitsu.com>
#    Wei Yongjun <yjwei@cn.fujitsu.com>
#
# Any bugs reported given to us we will try to fix... any fixes shared will
# be incorporated into the next SCTP release.
#
##############################################################################
BEGIN {	$V6evalTool::TestVersion = '$Name: REL_1_0_1 $'; }

use lib "../common";
use V6evalTool;
use SCTP;

%pktdesc = (
	sctp_chunk_error	=> "Recv SCTP CHUNK_ERROR (with Stale Cookie Error)"
);

$IF0 = Link0;

vCapture($IF0);

sctpCheckEnv($IF0);

sctpStartServer($IF0);

vLogHTML('<B>================ Main Test =================</B>');

vSend($IF0, sctp_chunk_init_snd);

%ret = vWarpRecv3($IF0, 10, 0, 0, sctp_chunk_init_ack_rcv);
if($ret{status} != 0 || $ret{recvFrame} ne sctp_chunk_init_ack_rcv) {
	vLogHTML('Cannot receive SCTP CHUNK_INIT_ACK<BR>');
	vLogHTML('<FONT COLOR="#FF0000">NG</FONT>'); 
	exit $V6evalTool::exitFail;
}

sctpFetchInitField(\%ret);

vSleep($SCTP::CONF{COOKIE_LIFE} + 5);

vSend($IF0, sctp_chunk_cookie_echo_snd);

%ret = vWarpRecv($IF0, 10, 0, 0, sctp_chunk_error);
if($ret{status} != 0 || $ret{recvFrame} ne sctp_chunk_error) {
	vSend($IF0, sctp_chunk_abort_snd);
	vLogHTML('Cannot receive SCTP CHUNK_ERROR<BR>');
	vLogHTML('<FONT COLOR="#FF0000">NG</FONT>'); 
	exit $V6evalTool::exitFail;
}

vSend($IF0, sctp_chunk_abort_snd);

vLogHTML(OK);
exit $V6evalTool::exitPass;

######################################################################
__END__

=head1 NAME

  CookieEchoExpired.seq - COOKIE-ECHO chunk is received with life time expired

=head1 PURPOSE

  To check that if a COOKIE-ECHO chunk is sent with life time expired
  then the endpoind should response it with an ERROR message and error
  cause is set to Stale Cookie Error.

=head1 SYNOPSIS

=begin html
<PRE>
  <A HREF="./CookieEchoExpired.seq">./CookieEchoExpired.seq</A> [-tooloption ...] -pkt <A HREF="./CookieEchoExpired.def">./CookieEchoExpired.def</A>
    -tooloption : v6eval tool option
  See Also: <A HREF="../common/STD_PKT_COMMON.def">../common/STD_PKT_COMMON.def</A>
            <A HREF="../common/SCTP_COMMON.def">../common/SCTP_COMMON.def</A>
</PRE>

=end html

=head1 PRE-TEST CONDITION

  Association is not established between endpoint A and B. Arrange data
  in endpoint A such that COOKIE-ECHO chunk with life time expired is
  sent to endpoint B.

=head1 TEST PROCEDURE

  Endpoint A                           Endpoint B                ULP
  (CLOSED)                             (CLOSED)

  INIT          ----------------->
  (with Cookie Preservative Parameter)
                <-----------------      INIT-ACK

  COOKIE-ECHO   ----------------->
  (life time expired)
                <-----------------      ERROR
                                        (Stale Cookie Error)

  TEST DESCRIPTION:

  1. Send COOKIE-ECHO chunk from endpoint A to B with life time
     expired.
  2. Check A: ERROR should be received at endpoint A.
  3. Check B: Error cause in ERROR is set to "Stale Cookie Error".

=head1 NOTE

  None

=head1 REFERENCE

  RFC 4960

  5.1.5.  State Cookie Authentication

    When an endpoint receives a COOKIE ECHO chunk from another endpoint
    with which it has no association, it shall take the following
    actions:

    1)  Compute a MAC using the TCB data carried in the State Cookie and
        the secret key (note the timestamp in the State Cookie MAY be
        used to determine which secret key to use).  [RFC2104] can be
        used as a guideline for generating the MAC,

    2)  Authenticate the State Cookie as one that it previously generated
        by comparing the computed MAC against the one carried in the
        State Cookie.  If this comparison fails, the SCTP packet,
        including the COOKIE ECHO and any DATA chunks, should be silently
        discarded,

    3)  Compare the port numbers and the Verification Tag contained
        within the COOKIE ECHO chunk to the actual port numbers and the
        Verification Tag within the SCTP common header of the received
        packet.  If these values do not match, the packet MUST be
        silently discarded.

=begin html
<PRE>
    <B>4)  Compare the creation timestamp in the State Cookie to the current
        local time.  If the elapsed time is longer than the lifespan
        carried in the State Cookie, then the packet, including the
        COOKIE ECHO and any attached DATA chunks, SHOULD be discarded,
        and the endpoint MUST transmit an ERROR chunk with a "Stale
        Cookie" error cause to the peer endpoint.</B>
</PRE>

=end html

    5)  If the State Cookie is valid, create an association to the sender
        of the COOKIE ECHO chunk with the information in the TCB data
        carried in the COOKIE ECHO and enter the ESTABLISHED state.

    6)  Send a COOKIE ACK chunk to the peer acknowledging receipt of the
        COOKIE ECHO.  The COOKIE ACK MAY be bundled with an outbound DATA
        chunk or SACK chunk; however, the COOKIE ACK MUST be the first
        chunk in the SCTP packet.

    7)  Immediately acknowledge any DATA chunk bundled with the COOKIE
        ECHO with a SACK (subsequent DATA chunk acknowledgement should
        follow the rules defined in Section 6.2).  As mentioned in step
        6, if the SACK is bundled with the COOKIE ACK, the COOKIE ACK
        MUST appear first in the SCTP packet.

    If a COOKIE ECHO is received from an endpoint with which the receiver
    of the COOKIE ECHO has an existing association, the procedures in
    Section 5.2 should be followed.
