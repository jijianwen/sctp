#!/usr/bin/perl
#
# SCTP Conformance Test Suite Implementation
# (C) Copyright Fujitsu Ltd. 2008, 2009, 2010
#
# This file is part of the SCTP Conformance Test Suite implementation.
#
# The SCTP Conformance Test Suite implementation is free software;
# you can redistribute it and/or modify it under the terms of
# the GNU General Public License version 2 as published by
# the Free Software Foundation.
#
# The SCTP Conformance Test Suite implementation is distributed in the
# hope that it will be useful, but WITHOUT ANY WARRANTY; without even
# the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
# PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with GNU CC; see the file COPYING.  If not, write to
# the Free Software Foundation, 59 Temple Place - Suite 330,
# Boston, MA 02111-1307, USA.
#
# Please send any bug reports or fixes you make to the
# email address(es):
#    networktest sctp <networktest-sctp@lists.sourceforge.net>
#
# Or submit a bug report through the following website:
#    http://networktest.sourceforge.net/
#
# Written or modified by:
#    Hiroaki Kago <linuxsctp-kg@ml.css.fujitsu.com>
#    Wei Yongjun <yjwei@cn.fujitsu.com>
#
# Any bugs reported given to us we will try to fix... any fixes shared will
# be incorporated into the next SCTP release.
#
##############################################################################
BEGIN {	$V6evalTool::TestVersion = '$Name: REL_1_0_3 $'; }

use lib "../common";
use V6evalTool;
use SCTP;

%pktdesc = (
	sctp_chunk_init_ack_miss_param	=> "Send SCTP CHUNK_INIT_ACK (Missing Mandatory Parameter)",
	sctp_chunk_abort_miss_param	=> "Recv SCTP CHUNK_ABORT (Missing Mandatory Parameter)",
);

$IF0 = Link0;

vCapture($IF0);

sctpCheckEnv($IF0);

sctpStartClient($IF0);

vLogHTML('<B>================ Main Test =================</B>');

%ret = vWarpRecv($IF0, 10, 0, 0, sctp_chunk_init_rcv);
if($ret{status} != 0 || $ret{recvFrame} ne sctp_chunk_init_rcv) {
	vLogHTML('Cannot receive SCTP CHUNK_INIT<BR>');
	vLogHTML('<FONT COLOR="#00FF00">NG</FONT>'); 
	exit $V6evalTool::exitFail;
}

sctpFetchInitField(\%ret);

vSend($IF0, sctp_chunk_init_ack_miss_param);

%ret = vWarpRecv($IF0, 10, 0, 0, sctp_chunk_abort_miss_param);
if($ret{status} != 0 || $ret{recvFrame} ne sctp_chunk_abort_miss_param) {
	vLogHTML('Cannot receive SCTP CHUNK_ABORT<BR>');
	vLogHTML('<FONT COLOR="#00FF00">NG</FONT>'); 
	exit $V6evalTool::exitFail;
}

vLogHTML(OK);
exit $V6evalTool::exitPass;

######################################################################
__END__

=head1 NAME

  InitAckWithParamMissing.seq - INIT-ACK is received chunk with mandatory parameter missing

=head1 PURPOSE

  To check that if a INIT-ACK chunk is received with missing mandatory
  parameter then the endpoint should response with an ABORT message and
  error cause is set to Missing Mandatory Parameter.

=head1 SYNOPSIS

=begin html
<PRE>
  <A HREF="./InitAckWithParamMissing.seq">./InitAckWithParamMissing.seq</A> [-tooloption ...] -pkt <A HREF="./InitAckWithParamMissing.def">./InitAckWithParamMissing.def</A>
    -tooloption : v6eval tool option
  See Also: <A HREF="../common/STD_PKT_COMMON.def">../common/STD_PKT_COMMON.def</A>
            <A HREF="../common/SCTP_COMMON.def">../common/SCTP_COMMON.def</A>
</PRE>

=end html

=head1 PRE-TEST CONDITION

  Association is not established between endpoint A and B. Arrange data
  in endpoint A such that INIT-ACK chunk with mandatory parameter missing
  is sent to endpoint B.

=head1 TEST PROCEDURE

  Endpoint A                           Endpoint B                ULP
  (ESTABLISHED)                        (ESTABLISHED)

                                                   <-----    Associate
                <-----------------      INIT

  INIT-ACK      ----------------->

                <-----------------      ABORT
                                        (Missing Mandatory Parameter)

  TEST DESCRIPTION:

  1. Send INIT-ACK chunk from endpoint A to B with missing mandatory
     parameter.
  2. Check A: ABORT should be received at endpoint A.
  3. Check B: Error cause in ABORT is set to "Missing Mandatory Parameter".

=head1 NOTE

  None

=head1 REFERENCE

  RFC 4960

  3.3.10.2.  Missing Mandatory Parameter (2)

    Cause of error
    ---------------

    Missing Mandatory Parameter: Indicates that one or more mandatory TLV
    parameters are missing in a received INIT or INIT ACK.

        +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
        |     Cause Code=2              |      Cause Length=8+N*2       |
        +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
        |                   Number of missing params=N                  |
        +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
        |   Missing Param Type #1       |   Missing Param Type #2       |
        +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
        |   Missing Param Type #N-1     |   Missing Param Type #N       |
        +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

    Number of Missing params: 32 bits (unsigned integer)

       This field contains the number of parameters contained in the
       Cause-Specific Information field.

    Missing Param Type: 16 bits (unsigned integer)

       Each field will contain the missing mandatory parameter number.

