#!/usr/bin/perl
#
# SCTP Conformance Test Suite Implementation
# (C) Copyright Fujitsu Ltd. 2008, 2009, 2010
#
# This file is part of the SCTP Conformance Test Suite implementation.
#
# The SCTP Conformance Test Suite implementation is free software;
# you can redistribute it and/or modify it under the terms of
# the GNU General Public License version 2 as published by
# the Free Software Foundation.
#
# The SCTP Conformance Test Suite implementation is distributed in the
# hope that it will be useful, but WITHOUT ANY WARRANTY; without even
# the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
# PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with GNU CC; see the file COPYING.  If not, write to
# the Free Software Foundation, 59 Temple Place - Suite 330,
# Boston, MA 02111-1307, USA.
#
# Please send any bug reports or fixes you make to the
# email address(es):
#    networktest sctp <networktest-sctp@lists.sourceforge.net>
#
# Or submit a bug report through the following website:
#    http://networktest.sourceforge.net/
#
# Written or modified by:
#    Hiroaki Kago <linuxsctp-kg@ml.css.fujitsu.com>
#    Wei Yongjun <yjwei@cn.fujitsu.com>
#
# Any bugs reported given to us we will try to fix... any fixes shared will
# be incorporated into the next SCTP release.
#
##############################################################################
BEGIN {	$V6evalTool::TestVersion = '$Name: REL_1_0_2 $'; }

use lib "../common";
use V6evalTool;
use SCTP;

%pktdesc = ();

$IF0 = Link0;
$IF1 = Link1;

vCapture($IF0);
vCapture($IF1);

sctpCheckEnv($IF0, $IF1);

sctpStartMultiHomeServer($IF0);

vLogHTML('<B>================ Main Test =================</B>');

vSend($IF0, sctp_chunk_init_snd);

%ret = vWarpRecv3($IF0, 10, 0, 0, sctp_chunk_init_ack_rcv);
if ($ret{status} != 0 || $ret{recvFrame} ne 'sctp_chunk_init_ack_rcv') {
	vLogHTML('Cannot receive SCTP CHUNK_INIT_ACK<BR>');
	vSend($IF0, sctp_chunk_abort_snd);
	vLogHTML('<FONT COLOR="#00FF00">NG</FONT>');
	exit $V6evalTool::exitFail;
}

sctpFetchInitField(\%ret);

vSend($IF1, sctp_chunk_cookie_echo_snd_link1);

%ret = vWarpRecv($IF1, 10, 0, 0, sctp_chunk_cookie_ack_rcv_link1);
if ($ret{status} != 0 || $ret{recvFrame} ne 'sctp_chunk_cookie_ack_rcv_link1') {
	vLogHTML('Cannot receive SCTP CHUNK_COOKIE_ACK<BR>');
	vSend($IF1, sctp_chunk_abort_snd);
	vLogHTML('<FONT COLOR="#00FF00">NG</FONT>');
	exit $V6evalTool::exitFail;
}

vClose($IF0);

vLogHTML(OK);
exit $V6evalTool::exitPass;

######################################################################
__END__

=head1 NAME

  CookieAckOnSamePath.seq - COOKIE-ACK chunk should be transmited to the source address of the COOKIE-ECHO

=head1 PURPOSE

  To check that the endpoint SHOULD transmit reply COOKIE-ACK chunk to
  the same destination transport address from which it received the
  COOKIE-ECHO chunk to which it is replying.

=head1 SYNOPSIS

=begin html
<PRE>
  <A HREF="./CookieAckOnSamePath.seq">./CookieAckOnSamePath.seq</A> [-tooloption ...] -pkt <A HREF="./CookieAckOnSamePath.def">./CookieAckOnSamePath.def</A>
    -tooloption : v6eval tool option
  See Also: <A HREF="../common/STD_PKT_COMMON.def">../common/STD_PKT_COMMON.def</A>
            <A HREF="../common/SCTP_COMMON.def">../common/SCTP_COMMON.def</A>
</PRE>

=end html

=head1 PRE-TEST CONDITION

  Association is not established between endpoint A and B. Arrange the
  data in endpoint A such that COOKIE-ECHO message is sent to endpoint
  B from an alternate active destination transport address.

=head1 TEST PROCEDURE

  Endpoint A                           Endpoint B                ULP
  (COOKIE-WAIT)                        (CLOSED)

  COOKIE-ECHO   ----------------->
  (On Link1)
                <-----------------      COOKIE-ACK
                                        (On Link1)

  TEST DESCRIPTION:

  1. Send COOKIE-ECHO message from endpoint A to B on an alternate active
     destination transport address.
  2. Check A: COOKIE-ACK chunk should be transmited fom endpoint B to
     the same destination transport address.

=head1 NOTE

  None

=head1 REFERENCE

  RFC 4960

  6.4.  Multi-Homed SCTP Endpoints

    An SCTP endpoint is considered multi-homed if there are more than one
    transport address that can be used as a destination address to reach
    that endpoint.

    Moreover, the ULP of an endpoint shall select one of the multiple
    destination addresses of a multi-homed peer endpoint as the primary
    path (see Section 5.1.2 and Section 10.1 for details).

    By default, an endpoint SHOULD always transmit to the primary path,
    unless the SCTP user explicitly specifies the destination transport
    address (and possibly source transport address) to use.

=begin html
<PRE>
    <B>An endpoint SHOULD transmit reply chunks (e.g., SACK, HEARTBEAT ACK,
    etc.) to the same destination transport address from which it
    received the DATA or control chunk to which it is replying.  This
    rule should also be followed if the endpoint is bundling DATA chunks
    together with the reply chunk.</B>
</PRE>

=end html

    However, when acknowledging multiple DATA chunks received in packets
    from different source addresses in a single SACK, the SACK chunk may
    be transmitted to one of the destination transport addresses from
    which the DATA or control chunks being acknowledged were received.

