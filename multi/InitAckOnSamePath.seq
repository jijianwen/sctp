#!/usr/bin/perl
#
# SCTP Conformance Test Suite Implementation
# (C) Copyright Fujitsu Ltd. 2008, 2009, 2010
#
# This file is part of the SCTP Conformance Test Suite implementation.
#
# The SCTP Conformance Test Suite implementation is free software;
# you can redistribute it and/or modify it under the terms of
# the GNU General Public License version 2 as published by
# the Free Software Foundation.
#
# The SCTP Conformance Test Suite implementation is distributed in the
# hope that it will be useful, but WITHOUT ANY WARRANTY; without even
# the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
# PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with GNU CC; see the file COPYING.  If not, write to
# the Free Software Foundation, 59 Temple Place - Suite 330,
# Boston, MA 02111-1307, USA.
#
# Please send any bug reports or fixes you make to the
# email address(es):
#    networktest sctp <networktest-sctp@lists.sourceforge.net>
#
# Or submit a bug report through the following website:
#    http://networktest.sourceforge.net/
#
# Written or modified by:
#    Hiroaki Kago <linuxsctp-kg@ml.css.fujitsu.com>
#    Wei Yongjun <yjwei@cn.fujitsu.com>
#
# Any bugs reported given to us we will try to fix... any fixes shared will
# be incorporated into the next SCTP release.
#
##############################################################################
BEGIN {	$V6evalTool::TestVersion = '$Name: REL_1_0_3 $'; }

use lib "../common";
use V6evalTool;
use SCTP;

%pktdesc = ();

$IF0 = Link0;
$IF1 = Link1;

vCapture($IF0);
vCapture($IF1);

sctpCheckEnv($IF0, $IF1);

sctpStartMultiHomeServer($IF0);

vLogHTML('<B>================ Main Test =================</B>');

vSend($IF0, sctp_chunk_init_snd);

%ret = vWarpRecv($IF0, 10, 0, 0, sctp_chunk_init_ack_rcv);
if ($ret{status} != 0 || $ret{recvFrame} ne 'sctp_chunk_init_ack_rcv') {
	vLogHTML('Cannot receive SCTP CHUNK_INIT_ACK<BR>');
	vSend($IF0, sctp_chunk_abort_snd);
	vLogHTML('<FONT COLOR="#00FF00">NG</FONT>');
	exit $V6evalTool::exitFail;
}

vSend($IF1, sctp_chunk_init_snd_link1);

%ret = vWarpRecv($IF1, 10, 0, 0, sctp_chunk_init_ack_rcv_link1);
if ($ret{status} != 0 || $ret{recvFrame} ne 'sctp_chunk_init_ack_rcv_link1') {
	vLogHTML('Cannot receive SCTP CHUNK_INIT_ACK<BR>');
	vSend($IF1, sctp_chunk_abort_snd_link1);
	vLogHTML('<FONT COLOR="#00FF00">NG</FONT>');
	exit $V6evalTool::exitFail;
}

sctpFetchInitField(\%ret);

vSend($IF1, sctp_chunk_abort_snd_link1);

vLogHTML(OK);
exit $V6evalTool::exitPass;

######################################################################
__END__

=head1 NAME

  InitAckOnSamePath.seq - INIT-ACK chunk should be transmited to the source address of the INIT

=head1 PURPOSE

  To check that the endpoint SHOULD transmit reply INIT-ACK chunk to
  the same destination transport address from which it received the
  INIT chunk to which it is replying.

=head1 SYNOPSIS

=begin html
<PRE>
  <A HREF="./InitAckOnSamePath.seq">./InitAckOnSamePath.seq</A> [-tooloption ...] -pkt <A HREF="./InitAckOnSamePath.def">./InitAckOnSamePath.def</A>
    -tooloption : v6eval tool option
  See Also: <A HREF="../common/STD_PKT_COMMON.def">../common/STD_PKT_COMMON.def</A>
            <A HREF="../common/SCTP_COMMON.def">../common/SCTP_COMMON.def</A>
</PRE>

=end html

=head1 PRE-TEST CONDITION

  Association is not established between endpoint A and B. Arrange the
  data in endpoint A such that INIT message is sent to endpoint B from
  an alternate active destination transport address.

=head1 TEST PROCEDURE

  Endpoint A                           Endpoint B                ULP
  (CLOSED)                             (CLOSED)

  INIT          ----------------->
  (On Link1)
                <-----------------      INIT-ACK
                                        (On Link1)

  TEST DESCRIPTION:

  1. Send INIT message from endpoint A to B on an alternate active
     destination transport address.
  2. Check A: INIT-ACK chunk should be transmited fom endpoint B to
     the same destination transport address.

=head1 NOTE

  None

=head1 REFERENCE

  RFC 4960

  5.1.2.  Handle Address Parameters

    After all transport addresses are derived from the INIT or INIT ACK
    chunk using the above rules, the endpoint shall select one of the
    transport addresses as the initial primary path.

=begin html
<PRE>
    <B>Note: The INIT ACK MUST be sent to the source address of the INIT.</B>
</PRE>

=end html

    The sender of INIT may include a 'Supported Address Types' parameter
    in the INIT to indicate what types of address are acceptable.  When
    this parameter is present, the receiver of INIT (initiate) MUST
    either use one of the address types indicated in the Supported
    Address Types parameter when responding to the INIT, or abort the
    association with an "Unresolvable Address" error cause if it is
    unwilling or incapable of using any of the address types indicated by
    its peer.

