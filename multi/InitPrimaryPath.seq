#!/usr/bin/perl
#
# SCTP Conformance Test Suite Implementation
# (C) Copyright Fujitsu Ltd. 2008, 2009, 2010
#
# This file is part of the SCTP Conformance Test Suite implementation.
#
# The SCTP Conformance Test Suite implementation is free software;
# you can redistribute it and/or modify it under the terms of
# the GNU General Public License version 2 as published by
# the Free Software Foundation.
#
# The SCTP Conformance Test Suite implementation is distributed in the
# hope that it will be useful, but WITHOUT ANY WARRANTY; without even
# the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
# PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with GNU CC; see the file COPYING.  If not, write to
# the Free Software Foundation, 59 Temple Place - Suite 330,
# Boston, MA 02111-1307, USA.
#
# Please send any bug reports or fixes you make to the
# email address(es):
#    networktest sctp <networktest-sctp@lists.sourceforge.net>
#
# Or submit a bug report through the following website:
#    http://networktest.sourceforge.net/
#
# Written or modified by:
#    Hiroaki Kago <linuxsctp-kg@ml.css.fujitsu.com>
#    Wei Yongjun <yjwei@cn.fujitsu.com>
#
# Any bugs reported given to us we will try to fix... any fixes shared will
# be incorporated into the next SCTP release.
#
##############################################################################
BEGIN {	$V6evalTool::TestVersion = '$Name: REL_1_0_2 $'; }

use lib "../common";
use V6evalTool;
use SCTP;

%pktdesc = ();

$IF0 = Link0;
$IF1 = Link1;

vCapture($IF0);
vCapture($IF1);

sctpCheckEnv($IF0, $IF1);

sctpStartMultiHomeClient($IF0);

vLogHTML('<B>================ Main Test =================</B>');

%ret = vWarpRecv($IF0, 10, 0, 0, sctp_chunk_init_rcv);
if ($ret{status} != 0 || $ret{recvFrame} ne 'sctp_chunk_init_rcv') {
	vLogHTML('Cannot receive SCTP CHUNK_INIT<BR>');
	vSend($IF0, sctp_chunk_abort_snd);
	vLogHTML('<FONT COLOR="#00FF00">NG</FONT>');
	exit $V6evalTool::exitFail;
}

%ret = vWarpRecv($IF1, 10, 0, 0, sctp_chunk_init_rcv_link1);
if ($ret{status} != 0 || $ret{recvFrame} ne 'sctp_chunk_init_rcv_link1') {
	vLogHTML('Cannot receive SCTP CHUNK_INIT<BR>');
	vSend($IF1, sctp_chunk_abort_snd);
	vLogHTML('<FONT COLOR="#00FF00">NG</FONT>');
	exit $V6evalTool::exitFail;
}

sctpFetchInitField(\%ret);

vSend($IF1, sctp_chunk_init_ack_snd_link1);

%ret = vWarpRecv($IF0, 2, 0, 0, sctp_chunk_cookie_echo_rcv);
if($ret{status} == 0 && $ret{recvFrame} eq 'sctp_chunk_cookie_echo_rcv') {
	vLogHTML('Received unexpected SCTP CHUNK_COOKIE_ECHO on Link0<BR>');
	vSend($IF0, sctp_chunk_abort_snd);
	vLogHTML('<FONT COLOR="#FF0000">NG</FONT>');
	exit $V6evalTool::exitFail;
}

%ret = vWarpRecv($IF1, 10, 0, 0, sctp_chunk_cookie_echo_rcv_link1);
if($ret{status} != 0 || $ret{recvFrame} ne 'sctp_chunk_cookie_echo_rcv_link1') {
	vLogHTML('Cannot receive SCTP CHUNK_COOKIE_ECHO<BR>');
	vSend($IF1, sctp_chunk_abort_snd);
	vLogHTML('<FONT COLOR="#FF0000">NG</FONT>');
	exit $V6evalTool::exitFail;
}

vSend($IF1, sctp_chunk_abort_snd);

vLogHTML(OK);
exit $V6evalTool::exitPass;

######################################################################
__END__

=head1 NAME

  InitPrimaryPath.seq - Select the source address of the INIT chunk as the initial primary path

=head1 PURPOSE

  To check that the endpoint should select the source address of the INIT
  chunk as the initial primary path.

=head1 SYNOPSIS

=begin html
<PRE>
  <A HREF="./InitPrimaryPath.seq">./InitPrimaryPath.seq</A> [-tooloption ...] -pkt <A HREF="./InitPrimaryPath.def">./InitPrimaryPath.def</A>
    -tooloption : v6eval tool option
  See Also: <A HREF="../common/STD_PKT_COMMON.def">../common/STD_PKT_COMMON.def</A>
            <A HREF="../common/SCTP_COMMON.def">../common/SCTP_COMMON.def</A>
</PRE>

=end html

=head1 PRE-TEST CONDITION

  Association is not established between endpoint A and B. Arrange the
  data in endpoint B such that INIT message is sent to endpoint A.

=head1 TEST PROCEDURE

  Endpoint A                           Endpoint B                ULP
  (CLOSED)                             (CLOSED)

                                                   <-----    Associate
                <-----------------      INIT
                                        (On Link0)
               T1-init timer expires

                <-----------------      INIT
                                        (On Link1)
  INIT-ACK      ----------------->
  (On Link1)
                <-----------------      COOKIE-ECHO
                                        (On Link1)
  COOKIE-ACK    ----------------->
  (On Link1)

  TEST DESCRIPTION:

  1. Try to make an association from endpoint B to endpoint A by sending
     INIT message from endpoint B. Don't send INIT-ACK in response to 
     INIT message. Record the message sequence using a signal emulator.
  2. Check A: INIT message is sent again on Link1 after expiry of T1-Init
     timer.
  3. Send INIT-ACK in response to INIT message from endpoint A on Link1.
  4. Check B: COOKIE-ECHO message is sent to endpoint A on Link1 and not
     sent on Link0.
  5. Check C: Was the message sequence as above.

=head1 NOTE

  None

=head1 REFERENCE

  RFC 4960

  6.4.  Multi-Homed SCTP Endpoints

    An SCTP endpoint is considered multi-homed if there are more than one
    transport address that can be used as a destination address to reach
    that endpoint.

=begin html
<PRE>
    <B>Moreover, the ULP of an endpoint shall select one of the multiple
    destination addresses of a multi-homed peer endpoint as the primary
    path (see Section 5.1.2 and Section 10.1 for details).</B>
</PRE>

=end html

    By default, an endpoint SHOULD always transmit to the primary path,
    unless the SCTP user explicitly specifies the destination transport
    address (and possibly source transport address) to use.

    An endpoint SHOULD transmit reply chunks (e.g., SACK, HEARTBEAT ACK,
    etc.) to the same destination transport address from which it
    received the DATA or control chunk to which it is replying.  This
    rule should also be followed if the endpoint is bundling DATA chunks
    together with the reply chunk.

    However, when acknowledging multiple DATA chunks received in packets
    from different source addresses in a single SACK, the SACK chunk may
    be transmitted to one of the destination transport addresses from
    which the DATA or control chunks being acknowledged were received.

