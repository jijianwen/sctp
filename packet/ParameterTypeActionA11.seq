#!/usr/bin/perl
#
# SCTP Conformance Test Suite Implementation
# (C) Copyright Fujitsu Ltd. 2008, 2009
#
# This file is part of the SCTP Conformance Test Suite implementation.
#
# The SCTP Conformance Test Suite implementation is free software;
# you can redistribute it and/or modify it under the terms of
# the GNU General Public License version 2 as published by
# the Free Software Foundation.
#
# The SCTP Conformance Test Suite implementation is distributed in the
# hope that it will be useful, but WITHOUT ANY WARRANTY; without even
# the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
# PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with GNU CC; see the file COPYING.  If not, write to
# the Free Software Foundation, 59 Temple Place - Suite 330,
# Boston, MA 02111-1307, USA.
#
# Please send any bug reports or fixes you make to the
# email address(es):
#    networktest sctp <networktest-sctp@lists.sourceforge.net>
#
# Or submit a bug report through the following website:
#    http://networktest.sourceforge.net/
#
# Written or modified by:
#    Hiroaki Kago <linuxsctp-kg@ml.css.fujitsu.com>
#    Wei Yongjun <yjwei@cn.fujitsu.com>
#
# Any bugs reported given to us we will try to fix... any fixes shared will
# be incorporated into the next SCTP release.
#
##############################################################################
BEGIN {	$V6evalTool::TestVersion = '$Name: REL_1_0_0 $'; }

use lib "../common";
use V6evalTool;
use SCTP;

%pktdesc = (
	sctp_chunk_init_param_11	=> "Send SCTP CHUNK_INIT (with unrecognized paramter type which higher two bytes are set to 11)",
	sctp_chunk_init_ack_11		=> "Recv SCTP CHUNK_INIT_ACK (with error Unrecognized Parameter Type)",
);

$IF0 = Link0;

vCapture($IF0);

sctpCheckEnv($IF0);

sctpStartServer($IF0);

vLogHTML('<B>================ Main Test =================</B>');

vSend($IF0, sctp_chunk_init_param_11);

%ret = vWarpRecv3($IF0, 10, 0, 0, sctp_chunk_init_ack_11, sctp_chunk_init_ack_rcv);
if ($ret{status} != 0 || ($ret{recvFrame} ne 'sctp_chunk_init_ack_rcv' && $ret{recvFrame} ne 'sctp_chunk_init_ack_11')) {
	vLogHTML('Cannot receive SCTP CHUNK_INIT_ACK');
	vLogHTML('<FONT COLOR="#00FF00">NG</FONT>');
	exit $V6evalTool::exitFail;
}

sctpFetchInitField(\%ret);

if($ret{status} == 0 && $ret{recvFrame} ne sctp_chunk_init_ack_rcv) {
	vSend($IF0, sctp_chunk_abort_snd);
	vLogHTML('Unrecognized Parameter Type Error is not report<BR>');
	vLogHTML('<FONT COLOR="#00FF00">NG</FONT>'); 
	exit $V6evalTool::exitFail;
}

vSend($IF0, sctp_chunk_cookie_echo_snd);

%ret = vWarpRecv($IF0, 10, 0, 0, sctp_chunk_cookie_ack_rcv);
if($ret{status} != 0 || $ret{recvFrame} ne sctp_chunk_cookie_ack_rcv) {
	vLogHTML('Cannot receive SCTP CHUNK_COOKIE_ACK<BR>');
	vLogHTML('<FONT COLOR="#00FF00">NG</FONT>'); 
	exit $V6evalTool::exitFail;
}

vSendMsg($IF0);

vClose($IF0);

vLogHTML(OK);
exit $V6evalTool::exitPass;

######################################################################
__END__

=head1 NAME

  ParameterTypeActionA11.seq - Unrecognized Parameter Type with higher two bytes are set to 11

=head1 PURPOSE

  To check that if unrecognized parameter type is received with higher two bytes
  are set to 11, the endpoint should skip this parameter and continue processing
  but report the unrecognized parameter in an 'Unrecognized Parameter'.

=head1 SYNOPSIS

=begin html
<PRE>
  <A HREF="./ParameterTypeActionA11.seq">./ParameterTypeActionA11.seq</A> [-tooloption ...] -pkt <A HREF="./ParameterTypeActionA11.def">./ParameterTypeActionA11.def</A>
    -tooloption : v6eval tool option
  See Also: <A HREF="../common/STD_PKT_COMMON.def">../common/STD_PKT_COMMON.def</A>
            <A HREF="../common/SCTP_COMMON.def">../common/SCTP_COMMON.def</A>
</PRE>

=end html

=head1 PRE-TEST CONDITION

  Association is not established between endpoint A and B. Arrange the data
  in endpoint A such that INIT chunk is sent to endpoint B with unrecognized
  parameter type in which higher two bytes are set to 11.

=head1 TEST PROCEDURE

  Endpoint A                           Endpoint B                ULP
  (CLOSED)                             (CLOSED)

  INIT          ----------------->
  (with unrecognized parameter type 0xFF00)
                <-----------------      INIT-ACK
                                        (with Unrecognized Parameter)

  TEST DESCRIPTION:

  1. Attempt to initiate an association from endpoint A to B. Send INIT
     message with one optional parameter which is not defined in INIT. The
     highest order two bits in that parameter should be 11.
  2. Check A: That parameter is skipped and INIT-ACK is received at 
     endpoint A.
  3. Check B: Unrecognized parameter type in INIT-ACK contains the 
     parameter which was not recognized at endpoint B.

=head1 NOTE

  None

=head1 REFERENCE

  RFC 4960

  3.2.1.  Optional/Variable-Length Parameter Format

      The Parameter Types are encoded such that the highest-order 2 bits
      specify the action that must be taken if the processing endpoint
      does not recognize the Parameter Type.

      00 -  Stop processing this parameter; do not process any further
            parameters within this chunk.

      01 -  Stop processing this parameter, do not process any further
            parameters within this chunk, and report the unrecognized
            parameter in an 'Unrecognized Parameter', as described in
            Section 3.2.2.

      10 -  Skip this parameter and continue processing.

=begin html
<PRE>
      <B>11 -  Skip this parameter and continue processing but report the
            unrecognized parameter in an 'Unrecognized Parameter', as
            described in Section 3.2.2.</B>
</PRE>

=end html

    Please note that in all four cases, an INIT ACK or COOKIE ECHO chunk
    is sent.  In the 00 or 01 case, the processing of the parameters
    after the unknown parameter is canceled, but no processing already
    done is rolled back.

