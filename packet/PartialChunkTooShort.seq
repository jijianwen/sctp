#!/usr/bin/perl
#
# SCTP Conformance Test Suite Implementation
# (C) Copyright Fujitsu Ltd. 2008, 2009
#
# This file is part of the SCTP Conformance Test Suite implementation.
#
# The SCTP Conformance Test Suite implementation is free software;
# you can redistribute it and/or modify it under the terms of
# the GNU General Public License version 2 as published by
# the Free Software Foundation.
#
# The SCTP Conformance Test Suite implementation is distributed in the
# hope that it will be useful, but WITHOUT ANY WARRANTY; without even
# the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
# PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with GNU CC; see the file COPYING.  If not, write to
# the Free Software Foundation, 59 Temple Place - Suite 330,
# Boston, MA 02111-1307, USA.
#
# Please send any bug reports or fixes you make to the
# email address(es):
#    networktest sctp <networktest-sctp@lists.sourceforge.net>
#
# Or submit a bug report through the following website:
#    http://networktest.sourceforge.net/
#
# Written or modified by:
#    Hiroaki Kago <linuxsctp-kg@ml.css.fujitsu.com>
#    Wei Yongjun <yjwei@cn.fujitsu.com>
#
# Any bugs reported given to us we will try to fix... any fixes shared will
# be incorporated into the next SCTP release.
#
##############################################################################
BEGIN {	$V6evalTool::TestVersion = '$Name: REL_1_0_1 $'; }

use lib "../common";
use V6evalTool;
use SCTP;

%pktdesc = (
	sctp_chunk_data_part	=> "CHUNK_DATA (with Chunk Length less than 4-bytes)",
);

$IF0 = Link0;

vCapture($IF0);

sctpCheckEnv($IF0);

sctpStartServer($IF0);

vConnect($IF0);

vLogHTML('<B>================ Main Test =================</B>');

vSend($IF0, sctp_chunk_data_part);

%ret = vWarpRecv($IF0, 10, 0, 0, sctp_chunk_any_rcv);
if($ret{status} == 0 && $ret{recvFrame} eq sctp_chunk_any_rcv) {
	vLogHTML('Received unexpected SCTP CHUNK<BR>');
	vLogHTML('<FONT COLOR="#00FF00">NG</FONT>'); 
	exit $V6evalTool::exitFail;
}

vSendMsg($IF0);

vClose($IF0);

vLogHTML(OK);
exit $V6evalTool::exitPass;

######################################################################
__END__

=head1 NAME

  PartialChunkTooShort.seq - Partial Chunk is received with chunk length less than 4-bytes

=head1 PURPOSE

  To check that if partial chunk is received with chunk length less than
  4-bytes, the endpoint should drop the chunk.

=head1 SYNOPSIS

=begin html
<PRE>
  <A HREF="./PartialChunkTooShort.seq">./PartialChunkTooShort.seq</A> [-tooloption ...] -pkt <A HREF="./PartialChunkTooShort.def">./PartialChunkTooShort.def</A>
    -tooloption : v6eval tool option
  See Also: <A HREF="../common/STD_PKT_COMMON.def">../common/STD_PKT_COMMON.def</A>
            <A HREF="../common/SCTP_COMMON.def">../common/SCTP_COMMON.def</A>
</PRE>

=end html

=head1 PRE-TEST CONDITION

  Association is established between endpoint A and B. Arrange
  data in endpoint A such that DATA chunk is sent to endpoint
  B with chunk length less than 4-bytes.

=head1 TEST PROCEDURE

  Endpoint A                           Endpoint B                ULP
  (ESTABLISHED)                        (ESTABLISHED)

  DATA          ----------------->      Discard DATA
  (chunk length less than 4-bytes)

  TEST DESCRIPTION:

  1. Send DATA message from endpoint A to B with chunk length less than
     4-bytes.
     Record the message sequence using a signal emulator.
  2. Check A: ABORT message is discarded and no other actions are taken. 
  3. Check B: Was the message sequence as above.

=head1 NOTE

  None

=head1 REFERENCE

  RFC 4960

  6.10.  Bundling

    Partial chunks MUST NOT be placed in an SCTP packet.  A partial chunk
    is a chunk that is not completely contained in the SCTP packet; i.e.,
    the SCTP packet is too short to contain all the bytes of the chunk as
    indicated by the chunk length.

=begin html
<PRE>
    An endpoint MUST process received chunks in their order in the
    packet.  The receiver uses the Chunk Length field to determine the
    end of a chunk and beginning of the next chunk taking account of the
    fact that all chunks end on a 4-byte boundary.  <B>If the receiver
    detects a partial chunk, it MUST drop the chunk.</B>
</PRE>

=end html

