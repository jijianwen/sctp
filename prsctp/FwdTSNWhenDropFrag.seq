#!/usr/bin/perl
#
# SCTP Conformance Test Suite Implementation
# (C) Copyright Fujitsu Ltd. 2008, 2009
#
# This file is part of the SCTP Conformance Test Suite implementation.
#
# The SCTP Conformance Test Suite implementation is free software;
# you can redistribute it and/or modify it under the terms of
# the GNU General Public License version 2 as published by
# the Free Software Foundation.
#
# The SCTP Conformance Test Suite implementation is distributed in the
# hope that it will be useful, but WITHOUT ANY WARRANTY; without even
# the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
# PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with GNU CC; see the file COPYING.  If not, write to
# the Free Software Foundation, 59 Temple Place - Suite 330,
# Boston, MA 02111-1307, USA.
#
# Please send any bug reports or fixes you make to the
# email address(es):
#    networktest sctp <networktest-sctp@lists.sourceforge.net>
#
# Or submit a bug report through the following website:
#    http://networktest.sourceforge.net/
#
# Written or modified by:
#    Hiroaki Kago <linuxsctp-kg@ml.css.fujitsu.com>
#    Wei Yongjun <yjwei@cn.fujitsu.com>
#
# Any bugs reported given to us we will try to fix... any fixes shared will
# be incorporated into the next SCTP release.
#
##############################################################################
BEGIN {	$V6evalTool::TestVersion = '$Name: REL_1_0_1 $'; }

use lib "../common";
use V6evalTool;
use SCTP;

%pktdesc = (
	sctp_chunk_data_frag1	=> "Recv SCTP CHUNK_DATA (segment 1st)",
	sctp_chunk_data_frag2	=> "Recv SCTP CHUNK_DATA (segment 2nd)",
	sctp_chunk_data_frag3	=> "Recv SCTP CHUNK_DATA (segment 3rd)",
	sctp_chunk_data_frag4	=> "Recv SCTP CHUNK_DATA (segment 4th)",
	sctp_chunk_ftsn_frag	=> "Recv SCTP CHUNK_FORWARD_TSN (fragmented delivery)",
);

$IF0 = Link0;

vCapture($IF0);

sctpCheckEnv($IF0);

sctpStartClient($IF0, 1, 4 * (($SCTP::CONF{ENABLE_IPV6} == 0) ? 1452 : 1432), "-O 3000");

vListen($IF0);

vAccept($IF0);

vLogHTML('<B>================ Main Test =================</B>');

for ($i = 1; $i < 5; $i++) {
	sctpUpdateRecvACK();
	%ret = vWarpRecv($IF0, 10, 0, 0, "sctp_chunk_data_frag" . $i);
	if($ret{status} != 0 || $ret{recvFrame} ne "sctp_chunk_data_frag" . $i) {
		vLogHTML('Cannot receive SCTP CHUNK_DATA (' . $i . ')<BR>');
		vLogHTML('<FONT COLOR="#00FF00">NG</FONT>'); 
		exit $V6evalTool::exitFail;
	}
}

# wait for ordered delivery messages become abandoned
%ret = vWarpRecv($IF0, 10, 0, 0, sctp_chunk_ftsn_frag);
if ($ret{status} != 0 || $ret{recvFrame} ne 'sctp_chunk_ftsn_frag') {
	vLogHTML('Cannot receive SCTP CHUNK_DATA<BR>');
	vSend($IF0, sctp_chunk_abort_snd);
	vLogHTML('<FONT COLOR="#00FF00">NG</FONT>');
	exit $V6evalTool::exitFail;
}

vSend($IF0, sctp_chunk_sack_snd);

vShutdown($IF0);

vLogHTML(OK);
exit $V6evalTool::exitPass;

######################################################################
__END__

=head1 NAME

  FwdTSNWhenDropFrag.seq - FORWARD-TSN Chunk is sent to indicating fragmented delivery is abandoned

=head1 PURPOSE

  To check that if fragmented delivery message is abandoned then the endpoint
  should send FORWARD-TSN chunk to indicating fragmented delivery is abandoned.

=head1 SYNOPSIS

=begin html
<PRE>
  <A HREF="./FwdTSNWhenDropFrag.seq">./FwdTSNWhenDropFrag.seq</A> [-tooloption ...] -pkt <A HREF="./FwdTSNWhenDropFrag.def">./FwdTSNWhenDropFrag.def</A>
    -tooloption : v6eval tool option
  See Also: <A HREF="../common/STD_PKT_COMMON.def">../common/STD_PKT_COMMON.def</A>
            <A HREF="../common/SCTP_COMMON.def">../common/SCTP_COMMON.def</A>
</PRE>

=end html

=head1 PRE-TEST CONDITION

  Association is established between endpoint A and B. Arrange data in
  endpoint B such that fragmented DATA messages are sent to endpoint A.

=head1 TEST PROCEDURE

  Endpoint A                           Endpoint B                ULP
  (ESTABLISHED)                        (ESTABLISHED)

                <-----------------      DATA1
                                        (TSN=x, B=1, E=0)
                <-----------------      DATA2
                                        (TSN=x+1, B=0, E=0)
                <-----------------      DATA3
                                        (TSN=x+2, B=0, E=0)
                <-----------------      DATA4
                                        (TSN=x+3, B=0, E=1)
                <-----------------      FORWARD-TSN
                                        (NewTSN=x+3)
  SACK          ----------------->

  TEST DESCRIPTION:

  1. Send fragmented DATA messages from endpoint B to A. Record the message
     sequence using a signal emulator.
  2. Check A: FORWARD-TSN message will be sent from endpoint B after
     DATA messages are abandoned.
  3. Check B: Was the message sequence as above.

=head1 NOTE

  None

=head1 REFERENCE

  RFC 3758

  3.5.  Sender Side Implementation of PR-SCTP

=begin html
<PRE>
    A3) <B>When a TSN is "abandoned", if it is part of a fragmented message,
        all other TSN's within that fragmented message MUST be abandoned
        at the same time.</B>
</PRE>

=end html

    A4) Whenever the data sender receives a SACK from the data receiver,
        it MUST first process the SACK using the normal procedures as
        defined in Section 6.2.1 of RFC 2960 [2].

