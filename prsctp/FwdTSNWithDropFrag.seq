#!/usr/bin/perl
#
# SCTP Conformance Test Suite Implementation
# (C) Copyright Fujitsu Ltd. 2008, 2009
#
# This file is part of the SCTP Conformance Test Suite implementation.
#
# The SCTP Conformance Test Suite implementation is free software;
# you can redistribute it and/or modify it under the terms of
# the GNU General Public License version 2 as published by
# the Free Software Foundation.
#
# The SCTP Conformance Test Suite implementation is distributed in the
# hope that it will be useful, but WITHOUT ANY WARRANTY; without even
# the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
# PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with GNU CC; see the file COPYING.  If not, write to
# the Free Software Foundation, 59 Temple Place - Suite 330,
# Boston, MA 02111-1307, USA.
#
# Please send any bug reports or fixes you make to the
# email address(es):
#    networktest sctp <networktest-sctp@lists.sourceforge.net>
#
# Or submit a bug report through the following website:
#    http://networktest.sourceforge.net/
#
# Written or modified by:
#    Hiroaki Kago <linuxsctp-kg@ml.css.fujitsu.com>
#    Wei Yongjun <yjwei@cn.fujitsu.com>
#
# Any bugs reported given to us we will try to fix... any fixes shared will
# be incorporated into the next SCTP release.
#
##############################################################################
BEGIN {	$V6evalTool::TestVersion = '$Name: REL_1_0_2 $'; }

use lib "../common";
use V6evalTool;
use SCTP;

%pktdesc = (
	sctp_chunk_data_a1	=> "Send SCTP CHUNK_DATA (Fragment 1st)",
	sctp_chunk_sack_a1	=> "Recv SCTP CHUNK_SACK (Fragment 1st)",
	sctp_chunk_data_a2	=> "Send SCTP CHUNK_DATA (Fragment 2nd)",
	sctp_chunk_sack_a2	=> "Recv SCTP CHUNK_SACK (Fragment 2nd)",
	sctp_chunk_ftsn_frag	=> "CHUNK_FORWARD_TSN (fragmented delivery)",
);

$IF0 = Link0;

vCapture($IF0);

sctpCheckEnv($IF0);

sctpStartServer($IF0);

vConnect($IF0);

# Send A1
vSendMsg($IF0, sctp_chunk_data_a1, sctp_chunk_sack_a1);
# Send A2
vSendMsg($IF0, sctp_chunk_data_a2, sctp_chunk_sack_a2);

vLogHTML('<B>================ Main Test =================</B>');

sctpUpdateSendTSN();
vSend($IF0, sctp_chunk_ftsn_frag);

%ret = vWarpRecv($IF0, 10, 0, 0, sctp_chunk_sack_rcv);
if ($ret{status} != 0 || $ret{recvFrame} ne 'sctp_chunk_sack_rcv') {
	vLogHTML('Cannot receive SCTP CHUNK_SACK<BR>');
	vSend($IF0, sctp_chunk_abort_snd);
	vLogHTML('<FONT COLOR="#00FF00">NG</FONT>');
	exit $V6evalTool::exitFail;
}

vSendMsg($IF0);

vClose($IF0);

vLogHTML(OK);
exit $V6evalTool::exitPass;

######################################################################
__END__

=head1 NAME

  FwdTSNWithDropFrag.seq - FORWARD-TSN Chunk is received to indicating fragmented delivery is abandoned

=head1 PURPOSE

  To check that if FORWARD-TSN chunk is received to indicating fragmented delivery
  is abandoned then the endpoint should remove any partially reassembled message
  which is still missing one or more TSNs earlier than or equal to the new cumulative
  TSN point.

=head1 SYNOPSIS

=begin html
<PRE>
  <A HREF="./FwdTSNWithDropFrag.seq">./FwdTSNWithDropFrag.seq</A> [-tooloption ...] -pkt <A HREF="./FwdTSNWithDropFrag.def">./FwdTSNWithDropFrag.def</A>
    -tooloption : v6eval tool option
  See Also: <A HREF="../common/STD_PKT_COMMON.def">../common/STD_PKT_COMMON.def</A>
            <A HREF="../common/SCTP_COMMON.def">../common/SCTP_COMMON.def</A>
</PRE>

=end html

=head1 PRE-TEST CONDITION

  Association is established between endpoint A and B. Arrange the data in
  endpoint A such that fragmented DATA messages are sent to endpoint B. And
  then in endpoint A FORWARD-TSN chunk is sent to indicating some fragmented
  DATA messages are abandoned.

=head1 TEST PROCEDURE

  Endpoint A                           Endpoint B                ULP
  (ESTABLISHED)                        (ESTABLISHED)

  DATA A1      ---------------->
  [TSN=0, B=1, E=0]
               <----------------        SACK

  DATA A2      ---------------->
  [TSN=1, B=0, E=0]
               <----------------        SACK

  DATA A3      ------(lost)---->
  [TSN=2, B=0, E=1]

  FORWARD-TSN   ----------------->
  [NewTSN=2]
                <-----------------      SACK

  TEST DESCRIPTION:

  1. Send DATA A1 from endpoint A to B with B=1, E=0.
  2. Send DATA A2 from endpoint A to B with B=0, E=0.
  3. Send FORWARD-TSN from endpoint A to B with NewTSN=2.
  4. Check A: Endpoint B should remove any partially reassembled
     message which is still missing one or more TSNs earlier than
     or equal to the new cumulative TSN point.

=head1 NOTE

  None

=head1 REFERENCE

  RFC 3758

  3.6.  Receiver Side Implementation of PR-SCTP

    An application using PR-SCTP receiving data should be aware of
    possible missing messages.  The stream sequence number can be used,
    in such a case, to determine that an intervening message has been
    skipped.  When intervening messages are missing, it is an application
    decision to process the messages or to take some other corrective
    action.

=begin html
<PRE>
    After receiving and processing a FORWARD TSN, the data receiver MUST
    take cautions in updating its re-assembly queue.  <B>The receiver MUST
    remove any partially reassembled message, which is still missing one
    or more TSNs earlier than or equal to the new cumulative TSN point.</B>
    In the event that the receiver has invoked the partial delivery API,
    a notification SHOULD also be generated to inform the upper layer API
    that the message being partially delivered will NOT be completed.
</PRE>

=end html

