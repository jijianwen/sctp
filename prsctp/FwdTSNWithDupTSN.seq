#!/usr/bin/perl
#
# SCTP Conformance Test Suite Implementation
# (C) Copyright Fujitsu Ltd. 2008, 2009, 2010
#
# This file is part of the SCTP Conformance Test Suite implementation.
#
# The SCTP Conformance Test Suite implementation is free software;
# you can redistribute it and/or modify it under the terms of
# the GNU General Public License version 2 as published by
# the Free Software Foundation.
#
# The SCTP Conformance Test Suite implementation is distributed in the
# hope that it will be useful, but WITHOUT ANY WARRANTY; without even
# the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
# PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with GNU CC; see the file COPYING.  If not, write to
# the Free Software Foundation, 59 Temple Place - Suite 330,
# Boston, MA 02111-1307, USA.
#
# Please send any bug reports or fixes you make to the
# email address(es):
#    networktest sctp <networktest-sctp@lists.sourceforge.net>
#
# Or submit a bug report through the following website:
#    http://networktest.sourceforge.net/
#
# Written or modified by:
#    Hiroaki Kago <linuxsctp-kg@ml.css.fujitsu.com>
#    Wei Yongjun <yjwei@cn.fujitsu.com>
#
# Any bugs reported given to us we will try to fix... any fixes shared will
# be incorporated into the next SCTP release.
#
##############################################################################
BEGIN {	$V6evalTool::TestVersion = '$Name: REL_1_0_2 $'; }

use lib "../common";
use V6evalTool;
use SCTP;

%pktdesc = (
	sctp_chunk_ftsn_dup_tsn	=> "Send SCTP CHUNK_FORWARD_TSN (with Cumulative TSN)",
	sctp_chunk_ftsn_old_tsn	=> "Send SCTP CHUNK_FORWARD_TSN (with old TSN)",
);

$IF0 = Link0;

vCapture($IF0);

sctpCheckEnv($IF0);

sctpStartServer($IF0);

vConnect($IF0);

vLogHTML('<B>================ Main Test =================</B>');

vSend($IF0, sctp_chunk_ftsn_dup_tsn);

%ret = vWarpRecv($IF0, 10, 0, 0, sctp_chunk_sack_rcv);
if ($ret{status} != 0 || $ret{recvFrame} ne 'sctp_chunk_sack_rcv') {
	vLogHTML('Cannot receive SCTP CHUNK_SACK<BR>');
	vSend($IF0, sctp_chunk_abort_snd);
	vLogHTML('<FONT COLOR="#00FF00">NG</FONT>');
	exit $V6evalTool::exitFail;
}

vSend($IF0, sctp_chunk_ftsn_old_tsn);

%ret = vWarpRecv($IF0, 10, 0, 0, sctp_chunk_sack_rcv);
if ($ret{status} != 0 || $ret{recvFrame} ne 'sctp_chunk_sack_rcv') {
	vLogHTML('Cannot receive SCTP CHUNK_SACK<BR>');
	vSend($IF0, sctp_chunk_abort_snd);
	vLogHTML('<FONT COLOR="#00FF00">NG</FONT>');
	exit $V6evalTool::exitFail;
}

vSendMsg($IF0);

vClose($IF0);

vLogHTML(OK);
exit $V6evalTool::exitPass;

######################################################################
__END__

=head1 NAME

  FwdTSNWithDupTSN.seq - FORWARD-TSN Chunk is received with New Cumulative TSN behind or at the current cumulative TSN point

=head1 PURPOSE

  To check that if FORWARD-TSN Chunk is received with New Cumulative TSN
  behind or at the current cumulative TSN point then the endpoint should
  treat this FORWARD-TSN as out-of-date and NOT update its Cumulative TSN.

=head1 SYNOPSIS

=begin html
<PRE>
  <A HREF="./FwdTSNWithDupTSN.seq">./FwdTSNWithDupTSN.seq</A> [-tooloption ...] -pkt <A HREF="./FwdTSNWithDupTSN.def">./FwdTSNWithDupTSN.def</A>
    -tooloption : v6eval tool option
  See Also: <A HREF="../common/STD_PKT_COMMON.def">../common/STD_PKT_COMMON.def</A>
            <A HREF="../common/SCTP_COMMON.def">../common/SCTP_COMMON.def</A>
</PRE>

=end html

=head1 PRE-TEST CONDITION

  Association is established between endpoint A and B. Arrange the date
  in endpoint A such that FORWARD-TSN chunk with New Cumulative TSN behind
  or at the current cumulative TSN point is sent to endpoint B.

=head1 TEST PROCEDURE

  Endpoint A                           Endpoint B                ULP
  (ESTABLISHED)                        (ESTABLISHED)

  FORWARD-TSN   ----------------->
  (with Cumulative TSN)
                <-----------------      SACK
                                        (with Cumulative TSN)
  FORWARD-TSN   ----------------->
  (with old TSN)
                <-----------------      SACK
                                        (with Cumulative TSN)

  TEST DESCRIPTION:

  1. Send FORWARD-TSN chunk from endpoint A to B with New Cumulative
     TSN at the current cumulative TSN point.
  2. Check A: SACK chunk should be received at endpoint A with current
     cumulative TSN. And endpoint B should treat this FORWARD-TSN as
     out-of-date and NOT update its Cumulative TSN.
  3. Send FORWARD-TSN chunk from endpoint A to B with New Cumulative
     TSN behind the current cumulative TSN point.
  4. Check B: SACK chunk should be received at endpoint A with current
     cumulative TSN. And endpoint B should treat this FORWARD-TSN as
     out-of-date and NOT update its Cumulative TSN.

=head1 NOTE

  None

=head1 REFERENCE

  RFC 3758

  3.6.  Receiver Side Implementation of PR-SCTP

    After the above processing, the data receiver MUST stop reporting any
    missing TSNs earlier than or equal to the new cumulative TSN point.

=begin html
<PRE>
    <B>Note, if the "New Cumulative TSN" value carried in the arrived
    FORWARD TSN chunk is found to be behind or at the current cumulative
    TSN point, the data receiver MUST treat this FORWARD TSN as out-of-
    date and MUST NOT update its Cumulative TSN.</B>  The receiver SHOULD
    send a SACK to its peer (the sender of the FORWARD TSN) since such a
    duplicate may indicate the previous SACK was lost in the network.
</PRE>

=end html

    Any time a FORWARD TSN chunk arrives, for the purposes of sending a
    SACK, the receiver MUST follow the same rules as if a DATA chunk had
    been received (i.e., follow the delayed sack rules specified in RFC
    2960 [2] section 6.2).

