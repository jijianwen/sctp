#!/usr/bin/perl
#
# SCTP Conformance Test Suite Implementation
# (C) Copyright Fujitsu Ltd. 2008, 2009
#
# This file is part of the SCTP Conformance Test Suite implementation.
#
# The SCTP Conformance Test Suite implementation is free software;
# you can redistribute it and/or modify it under the terms of
# the GNU General Public License version 2 as published by
# the Free Software Foundation.
#
# The SCTP Conformance Test Suite implementation is distributed in the
# hope that it will be useful, but WITHOUT ANY WARRANTY; without even
# the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
# PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with GNU CC; see the file COPYING.  If not, write to
# the Free Software Foundation, 59 Temple Place - Suite 330,
# Boston, MA 02111-1307, USA.
#
# Please send any bug reports or fixes you make to the
# email address(es):
#    networktest sctp <networktest-sctp@lists.sourceforge.net>
#
# Or submit a bug report through the following website:
#    http://networktest.sourceforge.net/
#
# Written or modified by:
#    Hiroaki Kago <linuxsctp-kg@ml.css.fujitsu.com>
#    Wei Yongjun <yjwei@cn.fujitsu.com>
#
# Any bugs reported given to us we will try to fix... any fixes shared will
# be incorporated into the next SCTP release.
#
##############################################################################
BEGIN {	$V6evalTool::TestVersion = '$Name: REL_1_0_0 $'; }

use lib "../common";
use V6evalTool;
use SCTP;

%pktdesc = ();

$IF0 = Link0;

vCapture($IF0);

sctpCheckEnv($IF0);

sctpStartServer($IF0);

vConnect($IF0);

vLogHTML('<B>================ Main Test =================</B>');

vSend($IF0, sctp_chunk_shutdown_snd);

%ret = vWarpRecv($IF0, 10, 0, 0, sctp_chunk_shutdown_ack_rcv);
if($ret{status} != 0 || $ret{recvFrame} ne sctp_chunk_shutdown_ack_rcv) {
	vLogHTML('Cannot receive SCTP CHUNK_SHUTDOWN_ACK<BR>');
	vLogHTML('<FONT COLOR="#00FF00">NG</FONT>'); 
	exit $V6evalTool::exitFail;
}

vSend($IF0, sctp_chunk_shutdown_ack_snd);

%ret = vWarpRecv($IF0, 10, 0, 0, sctp_chunk_shutdown_complete_rcv);
if($ret{status} != 0 || $ret{recvFrame} ne sctp_chunk_shutdown_complete_rcv) {
	vLogHTML('Cannot receive SCTP CHUNK_SHUTDOWN_COMPLETE<BR>');
	vLogHTML('<FONT COLOR="#FF0000">NG</FONT>'); 
	exit $V6evalTool::exitFail;
}

%ret = vWarpRecv($IF0, 10, 0, 0, sctp_chunk_shutdown_ack_rcv);
if($ret{status} == 0 && $ret{recvFrame} eq sctp_chunk_shutdown_ack_rcv) {
	vLogHTML('Received unexpected SCTP CHUNK_SHUTDOWN_ACK<BR>');
	vLogHTML('<FONT COLOR="#00FF00">NG</FONT>'); 
	exit $V6evalTool::exitFail;
}

vLogHTML(OK);
exit $V6evalTool::exitPass;

######################################################################
__END__

=head1 NAME

  ShutAckInShutAckSend.seq - SHUTDOWN-ACK chunk is received in SHUTDOWN-ACK-SENT State

=head1 PURPOSE

  To check that if SHUTDOWN-ACK chunk is received in SHUTDOWN-ACK-SENT
  state, the endpoint should stop the T2-shutdown timer, respond with a
  SHUTDOWN-COMPLETE chunk.

=head1 SYNOPSIS

=begin html
<PRE>
  <A HREF="./ShutAckInShutAckSend.seq">./ShutAckInShutAckSend.seq</A> [-tooloption ...] -pkt <A HREF="./ShutAckInShutAckSend.def">./ShutAckInShutAckSend.def</A>
    -tooloption : v6eval tool option
  See Also: <A HREF="../common/STD_PKT_COMMON.def">../common/STD_PKT_COMMON.def</A>
            <A HREF="../common/SCTP_COMMON.def">../common/SCTP_COMMON.def</A>
</PRE>

=end html

=head1 PRE-TEST CONDITION

  Association is not established between endpoint A and B. Arrange data 
  in endpoint A such that SHUTDOWN-ACK chunk is sent to endpoint B when
  endpoint B is in SHUTDOWN-ACK-SENT state.

=head1 TEST PROCEDURE

  Endpoint A                           Endpoint B                ULP
  (ESTABLISHED)                        (ESTABLISHED)

  SHUTDOWN      ----------------->

                <-----------------      SHUTDOWN-ACK

  SHUTDOWN-ACK  ----------------->

                <-----------------      SHUTDOWN-COMPLETE

  TEST DESCRIPTION:

  1. Send SHUTDOWN-ACK message from endpoint A to B when endpoint B is in
     SHUTDOWN-ACK-SENT state. 
  2. Check A: SHUTDOWN-COMPLETE message will be sent to endpoint A.
  3. Check B: T2-shutdown timer is stop and no SHUTDOWN-ACK message can be
     received at endpoint A.

=head1 NOTE

  None

=head1 REFERENCE

  RFC 4960

  9.2.  Shutdown of an Association

=begin html
<PRE>
    <B>If an endpoint is in the SHUTDOWN-ACK-SENT state and receives a
    SHUTDOWN ACK, it shall stop the T2-shutdown timer, send a SHUTDOWN
    COMPLETE chunk to its peer, and remove all record of the association.</B>
</PRE>

=end html

