#!/usr/bin/perl
#
# SCTP Conformance Test Suite Implementation
# (C) Copyright Fujitsu Ltd. 2008, 2009
#
# This file is part of the SCTP Conformance Test Suite implementation.
#
# The SCTP Conformance Test Suite implementation is free software;
# you can redistribute it and/or modify it under the terms of
# the GNU General Public License version 2 as published by
# the Free Software Foundation.
#
# The SCTP Conformance Test Suite implementation is distributed in the
# hope that it will be useful, but WITHOUT ANY WARRANTY; without even
# the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
# PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with GNU CC; see the file COPYING.  If not, write to
# the Free Software Foundation, 59 Temple Place - Suite 330,
# Boston, MA 02111-1307, USA.
#
# Please send any bug reports or fixes you make to the
# email address(es):
#    networktest sctp <networktest-sctp@lists.sourceforge.net>
#
# Or submit a bug report through the following website:
#    http://networktest.sourceforge.net/
#
# Written or modified by:
#    Hiroaki Kago <linuxsctp-kg@ml.css.fujitsu.com>
#    Wei Yongjun <yjwei@cn.fujitsu.com>
#
# Any bugs reported given to us we will try to fix... any fixes shared will
# be incorporated into the next SCTP release.
#
##############################################################################
BEGIN {	$V6evalTool::TestVersion = '$Name: REL_1_0_2 $'; }

use lib "../common";
use V6evalTool;
use SCTP;

%pktdesc = ();

$IF0 = Link0;

vCapture($IF0);

sctpCheckEnv($IF0);

sctpStartClient($IF0);

vListen($IF0);

vAccept($IF0);

vLogHTML('<B>================ Main Test =================</B>');

sctpUpdateRecvACK();

%ret = vWarpRecv($IF0, 10, 0, 0, sctp_chunk_data_rcv);
if($ret{status} != 0 || $ret{recvFrame} ne sctp_chunk_data_rcv) {
	vLogHTML('Cannot receive SCTP CHUNK_DATA<BR>');
	vLogHTML('<FONT COLOR="#FF0000">NG</FONT>'); 
	exit $V6evalTool::exitFail;
}

vLogHTML('================== vClose ==================');

vSend($IF0, sctp_chunk_shutdown_snd);

%ret = vWarpRecv($IF0, 10, 0, 0, sctp_chunk_shutdown_ack_rcv);
if($ret{status} != 0 || $ret{recvFrame} ne sctp_chunk_shutdown_ack_rcv) {
	vSend($IF0, sctp_chunk_abort_snd);
	vLogHTML('Cannot receive SCTP CHUNK_SHUTDOWN_ACK<BR>');
	vLogHTML('<FONT COLOR="#FF0000">NG</FONT>'); 
	exit $V6evalTool::exitFail;
}	

vSend($IF0, sctp_chunk_shutdown_complete_snd);

vLogHTML(OK);
exit $V6evalTool::exitPass;

######################################################################
__END__

=head1 NAME

  ShutInShutPend.seq - SHUTDOWN chunk is received in SHUTDOWN-PENDING State

=head1 PURPOSE

  To check that if an endpoint is in the SHUTDOWN-PENDING state and receives
  a SHUTDOWN chunk from its peer, the endpoint shall all its outstanding DATA
  chunks have been received by the SHUTDOWN sender.

=head1 SYNOPSIS

=begin html
<PRE>
  <A HREF="./ShutInShutPend.seq">./ShutInShutPend.seq</A> [-tooloption ...] -pkt <A HREF="./ShutInShutPend.def">./ShutInShutPend.def</A>
    -tooloption : v6eval tool option
  See Also: <A HREF="../common/STD_PKT_COMMON.def">../common/STD_PKT_COMMON.def</A>
            <A HREF="../common/SCTP_COMMON.def">../common/SCTP_COMMON.def</A>
</PRE>

=end html

=head1 PRE-TEST CONDITION

  Association is established between endpoint A and B. Arrange the
  data in endpoint B such that terminate primitive is received from
  ULP to terminate the association. Arrange data in endpoint A such
  that SHUTDOWN message is sent to endpoint B.

=head1 TEST PROCEDURE

  Endpoint A                              Endpoint B                ULP
  (ESTABLISHED)                           (ESTABLISHED)

                    <----------------       DATA
                                             <---------    Terminate
  SHUTDOWN          ----------------->
  (all outstanding DATA chunks have been received)
                    <----------------       SHUTDOWN-ACK

  SHUTDOWN-COMPLETE ----------------->

  TEST DESCRIPTION:

  1. Try to terminate the association between endpoint A and B by sending
     terminate primitive from ULP. While endpoint B is in SHUTDOWN-PENDING
     state, send SHUTDOWN message from endpoint A.
  2. Check A: SHUTDOWN-ACK message is sent in response to the SHUTDOWN
     message.

=head1 NOTE

  None

=head1 REFERENCE

  RFC 4960

  9.2.  Shutdown of an Association

    Upon reception of the SHUTDOWN, the peer endpoint shall

    -  enter the SHUTDOWN-RECEIVED state,

    -  stop accepting new data from its SCTP user, and

    -  verify, by checking the Cumulative TSN Ack field of the chunk,
       that all its outstanding DATA chunks have been received by the
       SHUTDOWN sender.

    Once an endpoint has reached the SHUTDOWN-RECEIVED state, it MUST NOT
    send a SHUTDOWN in response to a ULP request, and should discard
    subsequent SHUTDOWN chunks.

