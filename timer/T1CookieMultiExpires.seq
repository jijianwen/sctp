#!/usr/bin/perl
#
# SCTP Conformance Test Suite Implementation
# (C) Copyright Fujitsu Ltd. 2008, 2009
#
# This file is part of the SCTP Conformance Test Suite implementation.
#
# The SCTP Conformance Test Suite implementation is free software;
# you can redistribute it and/or modify it under the terms of
# the GNU General Public License version 2 as published by
# the Free Software Foundation.
#
# The SCTP Conformance Test Suite implementation is distributed in the
# hope that it will be useful, but WITHOUT ANY WARRANTY; without even
# the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
# PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with GNU CC; see the file COPYING.  If not, write to
# the Free Software Foundation, 59 Temple Place - Suite 330,
# Boston, MA 02111-1307, USA.
#
# Please send any bug reports or fixes you make to the
# email address(es):
#    networktest sctp <networktest-sctp@lists.sourceforge.net>
#
# Or submit a bug report through the following website:
#    http://networktest.sourceforge.net/
#
# Written or modified by:
#    Hiroaki Kago <linuxsctp-kg@ml.css.fujitsu.com>
#    Wei Yongjun <yjwei@cn.fujitsu.com>
#
# Any bugs reported given to us we will try to fix... any fixes shared will
# be incorporated into the next SCTP release.
#
##############################################################################
BEGIN {	$V6evalTool::TestVersion = '$Name: REL_1_0_1 $'; }

use lib "../common";
use V6evalTool;
use SCTP;

%pktdesc = (
	sctp_chunk_cookie_echo_rcv		=> "Recv SCTP CHUNK_COOKIE_ECHO (On Link0)",
	sctp_chunk_cookie_echo_rcv_link1	=> "Recv SCTP CHUNK_COOKIE_ECHO (On Link1)",
);

$IF0 = Link0;
$IF1 = Link1;

vCapture($IF0);
vCapture($IF1);

sctpCheckEnv($IF0, $IF1);

$RTO = $SCTP::CONF{"RTO_INITIAL"};
$RTO_MAX = $SCTP::CONF{"RTO_MAX"};
$MAX_INIT_RETRANS = $SCTP::CONF{"MAX_INIT_RETRANS"};

sctpStartMultiHomeClient($IF0);

vListen($IF0);

vLogHTML('<B>================ Main Test =================</B>');

%ret = vWarpRecv($IF0, 30, 0, 0, sctp_chunk_cookie_echo_rcv);
if ($ret{status} != 0 || $ret{recvFrame} ne sctp_chunk_cookie_echo_rcv) {
	vLogHTML('Cannot receive SCTP CHUNK_COOKIE_ECHO<BR>');
	vSend($IF0, sctp_chunk_abort_snd);
	vLogHTML('<FONT COLOR="#00FF00">NG</FONT>');
	exit $V6evalTool::exitFail;
}

$stime = $ret{"recvTime".$ret{"recvCount"}};
$count = 0;

while ($count * 2 < $MAX_INIT_RETRANS) {
	# Don't send INIT-ACK, INIT will be retransmitted after RTO
	%ret = vWarpRecv($IF1, $RTO + 5, 0, 0, sctp_chunk_cookie_echo_rcv_link1);
	if($ret{status} != 0 || $ret{recvFrame} ne sctp_chunk_cookie_echo_rcv_link1) {
		vLogHTML('Cannot receive SCTP CHUNK_COOKIE_ECHO<BR>');
		vLogHTML('<FONT COLOR="#00FF00">NG</FONT>'); 
		exit $V6evalTool::exitFail;
	}

	$etime = $ret{"recvTime".$ret{"recvCount"}};
	$gap = $etime - $stime;

	if (!sctpTimeFuzzyEqual($gap, $RTO, $SCTP::CONF{"TIME_PREC"})) {
		vLogHTML("ERROR: The retransmit T1-cookie time received:$gap, but expected: $RTO<BR>");
		vSend($IF0, sctp_chunk_abort_snd);
		vLogHTML('<FONT COLOR="#00FF00">NG</FONT>'); 
		exit $V6evalTool::exitFail;
	}

	vLogHTML("OK: The retransmit T1-cookie time received:$gap, expected: $RTO<BR>");

	%ret = vWarpRecv($IF0, $RTO + 5, 0, 0, sctp_chunk_cookie_echo_rcv);
	if($ret{status} != 0 || $ret{recvFrame} ne sctp_chunk_cookie_echo_rcv) {
		vLogHTML('Cannot receive SCTP CHUNK_COOKIE_ECHO<BR>');
		vLogHTML('<FONT COLOR="#00FF00">NG</FONT>'); 
		exit $V6evalTool::exitFail;
	}

	$stime = $etime;
	$etime = $ret{"recvTime".$ret{"recvCount"}};
	$gap = $etime - $stime;

	if (!sctpTimeFuzzyEqual($gap, $RTO, $SCTP::CONF{"TIME_PREC"})) {
		vLogHTML("ERROR: The retransmit T1-cookie time received:$gap, but expected: $RTO<BR>");
		vSend($IF0, sctp_chunk_abort_snd);
		vLogHTML('<FONT COLOR="#00FF00">NG</FONT>'); 
		exit $V6evalTool::exitFail;
	}

	vLogHTML("OK: The retransmit T1-cookie time received:$gap, expected: $RTO<BR>");

	last if ($RTO == $RTO_MAX);

	$stime = $etime;
	$RTO = $RTO * 2; # back off the timer
	$RTO = $RTO_MAX if ($RTO > $RTO_MAX);
	$count++;
}

vSend($IF0, sctp_chunk_abort_snd);

vLogHTML(OK);
exit $V6evalTool::exitPass;

######################################################################
__END__

=head1 NAME

  T1CookieMultiExpires.seq - RTO is updated correctly if T1-cookie timer expires for a COOKIE-ECHO message (multi-homed endpoint)

=head1 PURPOSE

  To check that if T1-cookie expires on a destination address then the
  value of RTO is updated correctly for that address.

=head1 SYNOPSIS

=begin html
<PRE>
  <A HREF="./T1CookieMultiExpires.seq">./T1CookieMultiExpires.seq</A> [-tooloption ...] -pkt <A HREF="./T1CookieMultiExpires.def">./T1CookieMultiExpires.def</A>
    -tooloption : v6eval tool option
  See Also: <A HREF="../common/STD_PKT_COMMON.def">../common/STD_PKT_COMMON.def</A>
            <A HREF="../common/SCTP_COMMON.def">../common/SCTP_COMMON.def</A>
</PRE>

=end html

=head1 PRE-TEST CONDITION

  Association is not established between endpoint A and B. Arrange the 
  data in Endpoint A such that COOKIE-ACK is not sent in response to 
  COOKIE-ECHO message.

=head1 TEST PROCEDURE

  Endpoint A                           Endpoint B                ULP
  (CLOSED)                             (CLOSED)

                                                   <-----    Associate
                <-----------------      INIT

  INIT-ACK      ----------------->

                <-----------------      COOKIE-ECHO (DST=X)
  Don't send COOKIE-ACK                   |
                                          | T1-cookie timer Expires
                                          |
                <-----------------      COOKIE-ECHO (DST=Y)
  Don't send COOKIE-ACK                   |
                                          | T1-cookie timer Expires
                                          |
                <-----------------      COOKIE-ECHO (DST=X)

  TEST DESCRIPTION:

  1. Try to make an association from endpoint B to endpoint A by sending
     COOKIE-ECHO message from endpoint B. Don't send COOKIE-ACK in response
     to COOKIE-ECHO message. Record the message sequence using a signal
     emulator.
  2. Check A: COOKIE-ECHO message is sent again to alternate destination
     address after expiry of T1-cookie timer.
  3. Check B: Value of the T1-cookie RTO is updated correctly. 

=head1 NOTE

  None

=head1 REFERENCE

  RFC 4960

  4.  SCTP Association State Diagram

    Notes:

=begin html
<PRE>
    3)  <B>If the T1-cookie timer expires, the endpoint MUST retransmit
        COOKIE ECHO and restart the T1-cookie timer without changing
        state.</B>  This MUST be repeated up to 'Max.Init.Retransmits' times.
        After that, the endpoint MUST abort the initialization process
        and report the error to the SCTP user.
</PRE>

=end html

