#!/usr/bin/perl
#
# SCTP Conformance Test Suite Implementation
# (C) Copyright Fujitsu Ltd. 2008, 2009, 2010
#
# This file is part of the SCTP Conformance Test Suite implementation.
#
# The SCTP Conformance Test Suite implementation is free software;
# you can redistribute it and/or modify it under the terms of
# the GNU General Public License version 2 as published by
# the Free Software Foundation.
#
# The SCTP Conformance Test Suite implementation is distributed in the
# hope that it will be useful, but WITHOUT ANY WARRANTY; without even
# the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
# PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with GNU CC; see the file COPYING.  If not, write to
# the Free Software Foundation, 59 Temple Place - Suite 330,
# Boston, MA 02111-1307, USA.
#
# Please send any bug reports or fixes you make to the
# email address(es):
#    networktest sctp <networktest-sctp@lists.sourceforge.net>
#
# Or submit a bug report through the following website:
#    http://networktest.sourceforge.net/
#
# Written or modified by:
#    Hiroaki Kago <linuxsctp-kg@ml.css.fujitsu.com>
#    Wei Yongjun <yjwei@cn.fujitsu.com>
#
# Any bugs reported given to us we will try to fix... any fixes shared will
# be incorporated into the next SCTP release.
#
##############################################################################
BEGIN {	$V6evalTool::TestVersion = '$Name: REL_1_0_2 $'; }

use lib "../common";
use V6evalTool;
use SCTP;

%pktdesc = (
	sctp_chunk_shutdown_rcv		=> "Recv SCTP CHUNK_SHUTDOWN (On Link0)",
	sctp_chunk_shutdown_rcv_link1	=> "Recv SCTP CHUNK_SHUTDOWN (On Link1)",
);

$IF0 = Link0;
$IF1 = Link1;

vCapture($IF0);
vCapture($IF1);

sctpCheckEnv($IF0, $IF1);

sctpStartMultiHomeClient($IF0);

vListen($IF0);

vAccept($IF0);

vRecvMsg($IF0);

vLogHTML('<B>================ Main Test =================</B>');

%ret = vWarpRecv($IF0, 10, 0, 0, sctp_chunk_shutdown_rcv);
if ($ret{status} != 0 || $ret{recvFrame} ne 'sctp_chunk_shutdown_rcv') {
	vLogHTML('Cannot receive SCTP CHUNK_SHUTDOWN<BR>');
	vSend($IF0, sctp_chunk_abort_snd);
	vLogHTML('<FONT COLOR="#00FF00">NG</FONT>');
	exit $V6evalTool::exitFail;
}

%ret = vWarpRecv($IF1, 10, 0, 0, sctp_chunk_shutdown_rcv_link1);
if ($ret{status} != 0 || $ret{recvFrame} ne 'sctp_chunk_shutdown_rcv_link1') {
	vLogHTML('Cannot receive SCTP CHUNK_SHUTDOWN<BR>');
	vSend($IF0, sctp_chunk_abort_snd);
	vLogHTML('<FONT COLOR="#00FF00">NG</FONT>');
	exit $V6evalTool::exitFail;
}

%ret = vWarpRecv($IF0, 10, 0, 0, sctp_chunk_shutdown_rcv);
if ($ret{status} != 0 || $ret{recvFrame} ne 'sctp_chunk_shutdown_rcv') {
	vLogHTML('Cannot receive SCTP CHUNK_SHUTDOWN<BR>');
	vSend($IF0, sctp_chunk_abort_snd);
	vLogHTML('<FONT COLOR="#00FF00">NG</FONT>');
	exit $V6evalTool::exitFail;
}

vSend($IF0, sctp_chunk_shutdown_ack_snd);

%ret = vWarpRecv($IF0, 10, 0, 0, sctp_chunk_shutdown_complete_rcv);
if ($ret{status} != 0 || $ret{recvFrame} ne 'sctp_chunk_shutdown_complete_rcv') {
	vLogHTML('Cannot receive SCTP CHUNK_SHUTDOWN_COMPLETE<BR>');
	vSend($IF0, sctp_chunk_abort_snd);
	vLogHTML('<FONT COLOR="#00FF00">NG</FONT>');
	exit $V6evalTool::exitFail;
}

vLogHTML(OK);
exit $V6evalTool::exitPass;

######################################################################
__END__

=head1 NAME

  T2ShutdownRetransAlter1.seq - SHUTDOWN message is transmitted again to alternate destination address if T2-shutdown timer expires

=head1 PURPOSE

  To check that if the T2-shutdown timer expires then the endpoint retransmit
  the SHUTDOWN chunk last sent and if possible choose an alternate destination
  address.

=head1 SYNOPSIS

=begin html
<PRE>
  <A HREF="./T2ShutdownRetransAlter1.seq">./T2ShutdownRetransAlter1.seq</A> [-tooloption ...] -pkt <A HREF="./T2ShutdownRetransAlter1.def">./T2ShutdownRetransAlter1.def</A>
    -tooloption : v6eval tool option
  See Also: <A HREF="../common/STD_PKT_COMMON.def">../common/STD_PKT_COMMON.def</A>
            <A HREF="../common/SCTP_COMMON.def">../common/SCTP_COMMON.def</A>
</PRE>

=end html

=head1 PRE-TEST CONDITION

  Association is established between endpoint A and B. Arrange the
  data in endpoint A such that no SHUTDOWN-ACK is sent in response
  to SHUTDOWN. 

=head1 TEST PROCEDURE

  Endpoint A                           Endpoint B                ULP
  (ESTABLISHED)                        (ESTABLISHED)

                                                   <-----    Terminate
                <-----------------      SHUTDOWN (DST=X)
  Don't send SHUTDOWN-ACK                  |
                                           | T2-shutdown Timer Expires
                                           |
                <-----------------      SHUTDOWN (DST=Y)
  Don't send SHUTDOWN-ACK                  |
                                           | T2-shutdown Timer Expires
                                           |
                <-----------------      SHUTDOWN (DST=X)

  TEST DESCRIPTION:

  1. Try to terminate an association between endpoint A and endpoint B by
     sending SHUTDOWN message from endpoint B. Don't send the SHUTDOWN-ACK
     or any DATAGRAM from the endpoint A. Record the message sequence using
     a signal emulator.
  2. Check A: SHUTDOWN message is sent again to alternate destination address
     after expiry of T1-shutdown timer.

=head1 NOTE

  None

=head1 REFERENCE

  RFC 4960

  9.2.  Shutdown of an Association

=begin html
<PRE>
    <B>Once all its outstanding data has been acknowledged, the endpoint
    shall send a SHUTDOWN chunk to its peer including in the Cumulative
    TSN Ack field the last sequential TSN it has received from the peer.
    It shall then start the T2-shutdown timer and enter the SHUTDOWN-SENT
    state.  If the timer expires, the endpoint must resend the SHUTDOWN
    with the updated last sequential TSN received from its peer.</B>
</PRE>

=end html

    The rules in Section 6.3 MUST be followed to determine the proper
    timer value for T2-shutdown.  To indicate any gaps in TSN, the
    endpoint may also bundle a SACK with the SHUTDOWN chunk in the same
    SCTP packet.

    An endpoint should limit the number of retransmissions of the
    SHUTDOWN chunk to the protocol parameter 'Association.Max.Retrans'.
    If this threshold is exceeded, the endpoint should destroy the TCB
    and MUST report the peer endpoint unreachable to the upper layer (and
    thus the association enters the CLOSED state).  The reception of any
    packet from its peer (i.e., as the peer sends all of its queued DATA
    chunks) should clear the endpoint's retransmission count and restart
    the T2-shutdown timer, giving its peer ample opportunity to transmit
    all of its queued DATA chunks that have not yet been sent.

