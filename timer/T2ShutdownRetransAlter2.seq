#!/usr/bin/perl
#
# SCTP Conformance Test Suite Implementation
# (C) Copyright Fujitsu Ltd. 2008, 2009
#
# This file is part of the SCTP Conformance Test Suite implementation.
#
# The SCTP Conformance Test Suite implementation is free software;
# you can redistribute it and/or modify it under the terms of
# the GNU General Public License version 2 as published by
# the Free Software Foundation.
#
# The SCTP Conformance Test Suite implementation is distributed in the
# hope that it will be useful, but WITHOUT ANY WARRANTY; without even
# the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
# PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with GNU CC; see the file COPYING.  If not, write to
# the Free Software Foundation, 59 Temple Place - Suite 330,
# Boston, MA 02111-1307, USA.
#
# Please send any bug reports or fixes you make to the
# email address(es):
#    networktest sctp <networktest-sctp@lists.sourceforge.net>
#
# Or submit a bug report through the following website:
#    http://networktest.sourceforge.net/
#
# Written or modified by:
#    Hiroaki Kago <linuxsctp-kg@ml.css.fujitsu.com>
#    Wei Yongjun <yjwei@cn.fujitsu.com>
#
# Any bugs reported given to us we will try to fix... any fixes shared will
# be incorporated into the next SCTP release.
#
##############################################################################
BEGIN {	$V6evalTool::TestVersion = '$Name: REL_1_0_1 $'; }

use lib "../common";
use V6evalTool;
use SCTP;

%pktdesc = (
	sctp_chunk_shutdown_ack_rcv		=> "Recv SCTP CHUNK_SHUTDOWN_ACK (On Link0)",
	sctp_chunk_shutdown_ack_rcv_link1	=> "Recv SCTP CHUNK_SHUTDOWN_ACK (On Link1)",
	sctp_chunk_heartbeat_rcv_link1		=> "Recv SCTP CHUNK_HEARTBEAT (On Link1)",
	sctp_chunk_heartbeat_ack_snd_link1	=> "Recv SCTP CHUNK_HEARTBEAT_ACK (On Link1)",
);

$IF0 = Link0;
$IF1 = Link1;

vCapture($IF0);
vCapture($IF1);

sctpCheckEnv($IF0, $IF1);

sctpStartMultiHomeServer($IF0);

vConnect($IF0);

%ret = vWarpRecv3($IF1, 10, 0, 0, sctp_chunk_heartbeat_rcv_link1);
if ($ret{status} == 0 && $ret{recvFrame} eq 'sctp_chunk_heartbeat_rcv_link1') {
	$HBINFO = $ret{sctpGetFieldName("CHUNK_HEARTBEAT.HeartbeatInfo.Data")};
	vWarpCPP("-DHBINFO=\\\"$HBINFO\\\"");
	vSend($IF0, sctp_chunk_heartbeat_ack_snd_link1);
}

vLogHTML('<B>================ Main Test =================</B>');

vSend($IF0, sctp_chunk_shutdown_snd);

%ret = vWarpRecv($IF0, 10, 0, 0, sctp_chunk_shutdown_ack_rcv);
if ($ret{status} != 0 || $ret{recvFrame} ne 'sctp_chunk_shutdown_ack_rcv') {
	vLogHTML('Cannot receive SCTP CHUNK_SHUTDOWN_ACK<BR>');
	vSend($IF0, sctp_chunk_abort_snd);
	vLogHTML('<FONT COLOR="#00FF00">NG</FONT>');
	exit $V6evalTool::exitFail;
}

%ret = vWarpRecv($IF1, 10, 0, 0, sctp_chunk_shutdown_ack_rcv_link1);
if ($ret{status} != 0 || $ret{recvFrame} ne 'sctp_chunk_shutdown_ack_rcv_link1') {
	vLogHTML('Cannot receive SCTP CHUNK_SHUTDOWN_ACK<BR>');
	vSend($IF0, sctp_chunk_abort_snd);
	vLogHTML('<FONT COLOR="#00FF00">NG</FONT>');
	exit $V6evalTool::exitFail;
}

vSend($IF0, sctp_chunk_shutdown_complete_snd);

vLogHTML(OK);
exit $V6evalTool::exitPass;

######################################################################
__END__

=head1 NAME

  T2ShutdownRetransAlter2.seq - SHUTDOWN-ACK message is transmitted again to alternate destination address if T2-shutdown timer expires

=head1 PURPOSE

  To check that if the T2-shutdown timer expires then the endpoint retransmit the
  SHUTDOWN-ACK chunk last sent and if possible choose an alternate destination
  address.

=head1 SYNOPSIS

=begin html
<PRE>
  <A HREF="./T2ShutdownRetransAlter2.seq">./T2ShutdownRetransAlter2.seq</A> [-tooloption ...] -pkt <A HREF="./T2ShutdownRetransAlter2.def">./T2ShutdownRetransAlter2.def</A>
    -tooloption : v6eval tool option
  See Also: <A HREF="../common/STD_PKT_COMMON.def">../common/STD_PKT_COMMON.def</A>
            <A HREF="../common/SCTP_COMMON.def">../common/SCTP_COMMON.def</A>
</PRE>

=end html

=head1 PRE-TEST CONDITION

  Association is established between endpoint A and B. Arrange the data
  in endpoint A such that no SHUTDOWN-COMPLETE is sent in response to
  SHUTDOWN-ACK. 

=head1 TEST PROCEDURE

  Endpoint A                           Endpoint B                ULP
  (ESTABLISHED)                        (ESTABLISHED)

  SHUTDOWN      ----------------->

                <-----------------      SHUTDOWN (DST=X)
  Don't send SHUTDOWN-ACK                  |
                                           | T2-shutdown Timer Expires
                                           |
                <-----------------      SHUTDOWN (DST=Y)
  Don't send SHUTDOWN-ACK                  |
                                           | T2-shutdown Timer Expires
                                           |
                <-----------------      SHUTDOWN (DST=X)

  TEST DESCRIPTION:

  1. Try to terminate an association between endpoint A and endpoint B by
     sending SHUTDOWN message from endpoint A. Don't send the SHUTDOWN-COMPLETE
     or any DATAGRAM from the endpoint A after received SHUTDOWN-ACK message.
     Record the message sequence using a signal emulator.
  2. Check A: SHUTDOWN-ACK message is sent again to alternate destination
     address after expiry of T1-shutdown timer.

=head1 NOTE

  None

=head1 REFERENCE

  RFC 4960

  9.2.  Shutdown of an Association

=begin html
<PRE>
    If the receiver of the SHUTDOWN has no more outstanding DATA chunks,
    the SHUTDOWN receiver MUST send a SHUTDOWN ACK and start a T2-
    shutdown timer of its own, entering the SHUTDOWN-ACK-SENT state.  <B>If
    the timer expires, the endpoint must resend the SHUTDOWN ACK.</B>
</PRE>

=end html

    The sender of the SHUTDOWN ACK should limit the number of
    retransmissions of the SHUTDOWN ACK chunk to the protocol parameter
    'Association.Max.Retrans'.  If this threshold is exceeded, the
    endpoint should destroy the TCB and may report the peer endpoint
    unreachable to the upper layer (and thus the association enters the
    CLOSED state).

