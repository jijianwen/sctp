#!/usr/bin/perl
#
# SCTP Conformance Test Suite Implementation
# (C) Copyright Fujitsu Ltd. 2008, 2009, 2010
#
# This file is part of the SCTP Conformance Test Suite implementation.
#
# The SCTP Conformance Test Suite implementation is free software;
# you can redistribute it and/or modify it under the terms of
# the GNU General Public License version 2 as published by
# the Free Software Foundation.
#
# The SCTP Conformance Test Suite implementation is distributed in the
# hope that it will be useful, but WITHOUT ANY WARRANTY; without even
# the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
# PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with GNU CC; see the file COPYING.  If not, write to
# the Free Software Foundation, 59 Temple Place - Suite 330,
# Boston, MA 02111-1307, USA.
#
# Please send any bug reports or fixes you make to the
# email address(es):
#    networktest sctp <networktest-sctp@lists.sourceforge.net>
#
# Or submit a bug report through the following website:
#    http://networktest.sourceforge.net/
#
# Written or modified by:
#    Hiroaki Kago <linuxsctp-kg@ml.css.fujitsu.com>
#    Wei Yongjun <yjwei@cn.fujitsu.com>
#
# Any bugs reported given to us we will try to fix... any fixes shared will
# be incorporated into the next SCTP release.
#
##############################################################################
BEGIN {	$V6evalTool::TestVersion = '$Name: REL_1_0_2 $'; }

use lib "../common";
use V6evalTool;
use SCTP;

%pktdesc = ();

$IF0 = Link0;

vCapture($IF0);

sctpCheckEnv($IF0);

$ASSOC_MAX_RETRANS = $SCTP::CONF{"ASSOCIATION_MAX_RETRANS"};
$TIMEOUT = $SCTP::CONF{"RTO_MAX"} + 5;

sctpStartEchoClient($IF0, 2);

vListen($IF0);

vAccept($IF0);

vLogHTML('<B>================ Main Test =================</B>');

sctpUpdateRecvACK();

%ret = vWarpRecv($IF0, 10, 0, 0, sctp_chunk_data_rcv);
if($ret{status} != 0 || $ret{recvFrame} ne sctp_chunk_data_rcv) {
	vLogHTML('Cannot receive SCTP CHUNK_DATA<BR>');
	vLogHTML('<FONT COLOR="#00FF00">NG</FONT>'); 
	exit $V6evalTool::exitFail;
}

# DATA message is transmitted again if T3-rtx timer expires
%ret = vWarpRecv($IF0, 10, 0, 0, sctp_chunk_data_rcv);
if($ret{status} != 0 || $ret{recvFrame} ne sctp_chunk_data_rcv) {
	vLogHTML('Cannot receive SCTP CHUNK_DATA<BR>');
	vLogHTML('<FONT COLOR="#00FF00">NG</FONT>'); 
	exit $V6evalTool::exitFail;
}

vSend($IF0, sctp_chunk_sack_snd);

vSendMsg($IF0);

sctpUpdateRecvACK();

%ret = vWarpRecv($IF0, 10, 0, 0, sctp_chunk_data_rcv);
if($ret{status} != 0 || $ret{recvFrame} ne sctp_chunk_data_rcv) {
	vLogHTML('Cannot receive SCTP CHUNK_DATA<BR>');
	vLogHTML('<FONT COLOR="#00FF00">NG</FONT>'); 
	exit $V6evalTool::exitFail;
}

$retrans = 0;

while($ret{status} != 1) {
	%ret = vWarpRecv($IF0, $TIMEOUT, 0, 0, sctp_chunk_data_rcv, sctp_chunk_abort_rcv);

	last if($ret{status} == 0 && $ret{recvFrame} eq 'sctp_chunk_abort_rcv');
	if($ret{status} == 0 && $ret{recvFrame} eq 'sctp_chunk_data_rcv') {
		$retrans++;
	}
}

if($retrans != $ASSOC_MAX_RETRANS) {
	vLogHTML("Received SCTP CHUNK_DATA $retrans times, but expect $ASSOC_MAX_RETRANS times<BR>");
	vLogHTML('<FONT COLOR="#00FF00">NG</FONT>'); 
	exit $V6evalTool::exitFail;	
}

vLogHTML(OK);
exit $V6evalTool::exitPass;

######################################################################
__END__

=head1 NAME

  T3RtxTimeout2.seq - The counter of retransmissions shall be reset if the DATA chunk is acknowledged

=head1 PURPOSE

  To check that if DATA is acknowledged the counter of retransmissions shall be reset.

=head1 SYNOPSIS

=begin html
<PRE>
  <A HREF="./T3RtxTimeout2.seq">./T3RtxTimeout2.seq</A> [-tooloption ...] -pkt <A HREF="./T3RtxTimeout2.def">./T3RtxTimeout2.def</A>
    -tooloption : v6eval tool option
  See Also: <A HREF="../common/STD_PKT_COMMON.def">../common/STD_PKT_COMMON.def</A>
            <A HREF="../common/SCTP_COMMON.def">../common/SCTP_COMMON.def</A>
</PRE>

=end html

=head1 PRE-TEST CONDITION

  Association is established between endpoint A and B. Arrange the 
  data in Endpoint A such that SACK is not sent in response to DATA
  message.

=head1 TEST PROCEDURE

  Endpoint A                           Endpoint B                ULP
  (ESTABLISHED)                        (ESTABLISHED)

                  <----------------     DATA               <----- Send
                                    (Start T3-rtx timer)
  Don't Send SACK                         |
                                          | T3-rtx timer expired
                                          |
                  <----------------     DATA
  Don't Send SACK                         |
                                          | T3-rtx timer expired
                                          |
             SACK ----------------->

                  <----------------     DATA               <----- Send
                                    (Start T3-rtx timer)
  Don't Send SACK                         |
                                          | T3-rtx timer expired
                                          |
                  <----------------     DATA
                                          .
                                          . Retransmit x
                                          .  times

  TEST DESCRIPTION:

  1. Sending DATA message from endpoint B to A. Do not send SACK to response
     the DATA message.
     Record the message sequence using a signal emulator.
  2. Check A: If DATA is acknowledged the counter of retransmissions shall
     be reset.
  3. Check B: If next DATA message is transmitted for ASSOCIATION.MAX.RETRANS 
     times without getting an AACK, Association is aborted and upper layers
     are reported of this.

=head1 NOTE

  None

=head1 REFERENCE

  RFC 4960

  6.3.3.  Handle T3-rtx Expiration

    Whenever the retransmission timer T3-rtx expires for a destination
    address, do the following:

    E1)  For the destination address for which the timer expires, adjust
         its ssthresh with rules defined in Section 7.2.3 and set the
         cwnd <- MTU.

    E2)  For the destination address for which the timer expires, set RTO
         <- RTO * 2 ("back off the timer").  The maximum value discussed
         in rule C7 above (RTO.max) may be used to provide an upper bound
         to this doubling operation.

    E3)  Determine how many of the earliest (i.e., lowest TSN)
         outstanding DATA chunks for the address for which the T3-rtx has
         expired will fit into a single packet, subject to the MTU
         constraint for the path corresponding to the destination
         transport address to which the retransmission is being sent
         (this may be different from the address for which the timer
         expires; see Section 6.4).  Call this value K.  Bundle and
         retransmit those K DATA chunks in a single packet to the
         destination endpoint.

    E4)  Start the retransmission timer T3-rtx on the destination address
         to which the retransmission is sent, if rule R1 above indicates
         to do so.  The RTO to be used for starting T3-rtx should be the
         one for the destination address to which the retransmission is
         sent, which, when the receiver is multi-homed, may be different
         from the destination address for which the timer expired (see
         Section 6.4 below).

